name: Roll PyTorch

on:
  workflow_dispatch:
  push:
    branches:
      - 'RollPyTorch'

jobs:
  build_linux:
    name: Manylinux Build
    runs-on: ubuntu-latest
    steps:
    - name: Get torch-mlir
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - name: Setup ccache
      uses: ./.github/actions/setup-build
      with:
        cache-suffix: x86_64-out-of-tree-OFF
    - name: Build Python wheels and smoke test.
      run: |
        cd $GITHUB_WORKSPACE
        python -m pip install wheel

        # Fetch the most recent nightly PyTorch release
        PT_RELEASE=$(python -m pip index versions -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html --pre torch | grep "Available versions" | tr ' ' '\n' | sort -nr | head -n1 | tr -d ',' | sed 's/\([^+]*\).*/\1/')
        printf "\-f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html --pre torch==%s\n" "${PT_RELEASE}" > ./pytorch-requirements.txt

        # Fetch the whl file associated with the nightly release
        rm -f torch-"${PT_RELEASE}"-*.whl
        python -m pip download -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html --pre "torch==${PT_RELEASE}"

        # Read the commit hash from the downloaded whl file without extracting it
        PT_HASH=$(unzip -p torch-"${PT_RELEASE}"-*.whl torch/version.py | grep git_version | awk '{ print $3 }' | tr -d "'")
        echo "$PT_HASH" > ./pytorch-version.txt
        rm torch-"${PT_RELEASE}"-*.whl

        # Write the release and hash to the environment file so that we can
        # retrieve them when creating a PR
        echo "PT_HASH=${PT_HASH}" >> $GITHUB_ENV
        echo "PT_RELEASE=${PT_RELEASE}" >> $GITHUB_ENV

        TM_PACKAGES="out-of-tree" TM_USE_PYTORCH_BINARY="OFF" \
        TORCH_MLIR_SRC_PYTORCH_BRANCH="${PT_HASH}" \
        TORCH_MLIR_SRC_PYTORCH_RELEASE="${PT_RELEASE}" \
        ./build_tools/python_deploy/build_linux_packages.sh

    - name: Create PR to push new PyTorch version
      env:
        GITHUB_TOKEN: ${{ secrets.WORKFLOW_INVOCATION_TOKEN }}
      run: |
        git checkout -b "merge/pytorch-update-${{ env.PT_RELEASE }}"
        gh pr create -H "merge/pytorch-update-${{ env.PT_RELEASE }}" -B main \
          --title "build: update PyTorch version to nightly ${{ env.PT_RELEASE }}" \
          --body "Corresponding PyTorch commit hash: `${{ env.PT_HASH }}`" \
          --reviewer powderluv
