name: Build and Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

# Ensure that only a single job or workflow using the same
# concurrency group will run at a time. This would cancel
# any in-progress jobs in the same github workflow and github
# ref (e.g. refs/heads/main or refs/pull/<pr_number>/merge).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ubuntu-in-tree-binary-build:
    name: Ubuntu in-tree build using PyTorch binary
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout torch-mlir
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup ccache
        uses: ./.github/actions/setup-build
        with:
          cache-suffix: ubuntu-in-tree-pytorch-binary

      - name: Build and Test
        run: |
          TM_PACKAGES="in-tree" \
          TM_USE_PYTORCH_BINARY="ON" \
          ./build_tools/python_deploy/build_linux_packages.sh

  ubuntu-out-of-tree-build:
    name: Ubuntu out-of-tree build using PyTorch source
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout torch-mlir
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup ccache
        uses: ./.github/actions/setup-build
        with:
          cache-suffix: ubuntu-out-of-tree-pytorch-source

      - name: Fetch PyTorch commit hash
        run: |
          PT_HASH="$(cat ${GITHUB_WORKSPACE}/pytorch-version.txt)"
          echo "PT_HASH=${PT_HASH}" >> ${GITHUB_ENV}

      - name: Cache PyTorch Build
        id: cache-pytorch
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build_tools/python_deploy/wheelhouse
          key: ubuntu-x86_64-pytorch-${{ env.PT_HASH }}

      - name: Build and Test
        run: |
          TM_PACKAGES="out-of-tree" \
          TM_USE_PYTORCH_BINARY="OFF" \
          TORCH_MLIR_SRC_PYTORCH_BRANCH="$(cat pytorch-version.txt)" \
          TM_PYTORCH_INSTALL_WITHOUT_REBUILD="${{ steps.cache-pytorch.outputs.cache-hit }}" \
          ./build_tools/python_deploy/build_linux_packages.sh

  macos-build:
    name: macOS in-tree cross-compiled build using PyTorch binary
    runs-on: macos-12

    steps:
      - name: Checkout torch-mlir
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup ccache
        uses: ./.github/actions/setup-build
        with:
          cache-suffix: macos-in-tree-pytorch-binary

      - name: Configure Torch-MLIR
        # cross compile, can't test arm64
        run: |
          # TODO: Reenable LTC after build on macOS-arm64 is fixed (https://github.com/llvm/torch-mlir/issues/1253)
          cmake -GNinja -Bbuild \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_LINKER=lld \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_EXTERNAL_PROJECTS="torch-mlir;torch-mlir-dialects" \
            -DLLVM_EXTERNAL_TORCH_MLIR_SOURCE_DIR="$GITHUB_WORKSPACE" \
            -DLLVM_EXTERNAL_TORCH_MLIR_DIALECTS_SOURCE_DIR="${GITHUB_WORKSPACE}/externals/llvm-external-projects/torch-mlir-dialects" \
            -DLLVM_TARGETS_TO_BUILD=AArch64 \
            -DLLVM_USE_HOST_TOOLS=ON \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DTORCH_MLIR_ENABLE_MHLO=OFF \
            -DTORCH_MLIR_ENABLE_LTC=OFF \
            -DTORCH_MLIR_USE_INSTALLED_PYTORCH="ON" \
            -DMACOSX_DEPLOYMENT_TARGET=12.0 \
            -DPython3_EXECUTABLE="$(which python)" \
            $GITHUB_WORKSPACE/externals/llvm-project/llvm

      - name: Build Torch-MLIR
        run: cmake --build build

  windows-build:
    name: Windows in-tree build using PyTorch binary
    runs-on: windows-latest

    steps:
      - name: Checkout torch-mlir
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup ccache
        uses: ./.github/actions/setup-build
        with:
          cache-suffix: windows-in-tree-pytorch-binary

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build Torch-MLIR
        shell: pwsh
        run: ./build_tools/python_deploy/build_windows_ci.ps1
