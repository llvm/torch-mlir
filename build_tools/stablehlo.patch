diff --git a/stablehlo/transforms/StablehloCanonicalizeDynamism.cpp b/stablehlo/transforms/StablehloCanonicalizeDynamism.cpp
index 2bcdda4f..26a66cbe 100644
--- a/stablehlo/transforms/StablehloCanonicalizeDynamism.cpp
+++ b/stablehlo/transforms/StablehloCanonicalizeDynamism.cpp
@@ -308,11 +308,11 @@ struct StablehloCanonicalizeDynamismPass
       StablehloCanonicalizeDynamismPassBase;

   LogicalResult initialize(MLIRContext* context) override {
-    config.useTopDownTraversal = true;
-    config.enableRegionSimplification = GreedySimplifyRegionLevel::Aggressive;
-    config.maxIterations = 2;
-    config.maxNumRewrites = GreedyRewriteConfig::kNoLimit;
-    config.strictMode = GreedyRewriteStrictness::AnyOp;
+    config.setUseTopDownTraversal(true)
+        .setRegionSimplificationLevel(GreedySimplifyRegionLevel::Aggressive)
+        .setMaxIterations(2)
+        .setMaxNumRewrites(GreedyRewriteConfig::kNoLimit)
+        .setStrictness(GreedyRewriteStrictness::AnyOp);

     RewritePatternSet patterns_(context);
     populateStablehloCanonicalizeDynamismPatterns(context, &patterns_);
@@ -325,7 +325,7 @@ struct StablehloCanonicalizeDynamismPass
     auto func = getOperation();
     if (failed(applyPatternsGreedily(func, patterns, config))) {
       func.emitError("Failed to converge StablehloCanonicalizeDynamism in ")
-          << config.maxIterations << " iterations";
+          << config.getMaxIterations() << " iterations";
     }
   }

diff --git a/stablehlo/transforms/StablehloCompatibilityExpander.cpp b/stablehlo/transforms/StablehloCompatibilityExpander.cpp
index aa178250..3fea9e60 100644
--- a/stablehlo/transforms/StablehloCompatibilityExpander.cpp
+++ b/stablehlo/transforms/StablehloCompatibilityExpander.cpp
@@ -329,7 +329,7 @@ struct StablehloCompatibilityExpanderPass
   LogicalResult initialize(MLIRContext *context) override {
     auto targetVersion = validateTargetVersion(targetVersionOption);

-    config.useTopDownTraversal = true;
+    config.setUseTopDownTraversal(true);

     RewritePatternSet patterns_(context);
     populateStablehloCompatibilityExpanderPatterns(context, &patterns_,
@@ -347,7 +347,7 @@ struct StablehloCompatibilityExpanderPass
         failed(applyPatternsGreedily(module, patterns, config))) {
       module.emitError(
           "Failed to converge StableHLOCompatibilityExpanderPass in ")
-          << config.maxIterations << " iterations";
+          << config.getMaxIterations() << " iterations";
       signalPassFailure();
     }
   }
diff --git a/stablehlo/transforms/StablehloComplexMathExpander.cpp b/stablehlo/transforms/StablehloComplexMathExpander.cpp
index ec359417..95bfea59 100644
--- a/stablehlo/transforms/StablehloComplexMathExpander.cpp
+++ b/stablehlo/transforms/StablehloComplexMathExpander.cpp
@@ -51,7 +51,7 @@ struct StablehloComplexMathExpanderPass

  public:
   LogicalResult initialize(MLIRContext *context) override {
-    config.useTopDownTraversal = true;
+    config.setUseTopDownTraversal(true);
     RewritePatternSet patterns_(context);
     populateStablehloComplexMathExpanderPatterns(context, &patterns_);
     patterns = std::move(patterns_);
@@ -62,7 +62,7 @@ struct StablehloComplexMathExpanderPass
     auto func = getOperation();
     if (failed(applyPatternsGreedily(func, patterns, config))) {
       func.emitError("Failed to converge StableHLOComplexMathExpanderPass in ")
-          << config.maxIterations << " iterations";
+          << config.getMaxIterations() << " iterations";
       signalPassFailure();
     }
   }
diff --git a/stablehlo/transforms/StablehloLegalizeQDQToQuantizedOp.cpp b/stablehlo/transforms/StablehloLegalizeQDQToQuantizedOp.cpp
index 01f78bd1..693e5105 100644
--- a/stablehlo/transforms/StablehloLegalizeQDQToQuantizedOp.cpp
+++ b/stablehlo/transforms/StablehloLegalizeQDQToQuantizedOp.cpp
@@ -115,7 +115,7 @@ class StablehloLegalizeQDQToQuantizedOpPass
     if (failed(applyPatternsGreedily(func, patterns, config))) {
       func.emitError(
           "Failed to converge StablehloLegalizeQDQToQuantizedOpPass in ")
-          << config.maxIterations << " iterations";
+          << config.getMaxIterations() << " iterations";
       signalPassFailure();
     }
   }
diff --git a/stablehlo/transforms/StablehloLegalizeQuantizedOpToQDQ.cpp b/stablehlo/transforms/StablehloLegalizeQuantizedOpToQDQ.cpp
index 6b96c90b..33bca94e 100644
--- a/stablehlo/transforms/StablehloLegalizeQuantizedOpToQDQ.cpp
+++ b/stablehlo/transforms/StablehloLegalizeQuantizedOpToQDQ.cpp
@@ -125,7 +125,7 @@ class StablehloLegalizeQuantizedOpToQDQPass
     auto func = getOperation();
     if (failed(applyPatternsGreedily(func, patterns, config))) {
       func.emitError("Failed to converge StablehloLegalizeQuantizedOpToQDQ in ")
-          << config.maxIterations << " iterations";
+          << config.getMaxIterations() << " iterations";
       signalPassFailure();
     }
   }
diff --git a/stablehlo/transforms/StablehloRefineShapes.cpp b/stablehlo/transforms/StablehloRefineShapes.cpp
index fe9c1d83..95374701 100644
--- a/stablehlo/transforms/StablehloRefineShapes.cpp
+++ b/stablehlo/transforms/StablehloRefineShapes.cpp
@@ -1026,11 +1026,11 @@ LogicalResult applyShapeRefinementPatterns(func::FuncOp func,
   // TODO(#1048): Find out why .maxIterations = 1 no longer works.
   // There have been recent refactors to applyPatternsGreedily
   // upstream, and that might be the reason.
-  config.useTopDownTraversal = true;
-  config.enableRegionSimplification = GreedySimplifyRegionLevel::Aggressive;
-  config.maxIterations = 2;
-  config.maxNumRewrites = GreedyRewriteConfig::kNoLimit;
-  config.strictMode = GreedyRewriteStrictness::AnyOp;
+  config.setUseTopDownTraversal(true)
+      .setRegionSimplificationLevel(GreedySimplifyRegionLevel::Aggressive)
+      .setMaxIterations(2)
+      .setMaxNumRewrites(GreedyRewriteConfig::kNoLimit)
+      .setStrictness(GreedyRewriteStrictness::AnyOp);

   populateStablehloRefineShapesPatterns(context, &patterns);
   patterns.add<RefineCallOpPattern>(context, state);
@@ -1049,7 +1049,7 @@ LogicalResult applyShapeRefinementPatterns(func::FuncOp func,

   if (failed(applyPatternsGreedily(func, std::move(patterns), config)))
     func.emitError("Failed to converge StablehloRefineShapes in ")
-        << config.maxIterations << " iterations";
+        << config.getMaxIterations() << " iterations";

   return success();
 }
diff --git a/stablehlo/transforms/StablehloWrapInComposite.cpp b/stablehlo/transforms/StablehloWrapInComposite.cpp
index fe4cc4e3..48191d8f 100644
--- a/stablehlo/transforms/StablehloWrapInComposite.cpp
+++ b/stablehlo/transforms/StablehloWrapInComposite.cpp
@@ -183,7 +183,7 @@ class StablehloWrapInCompositePass

   void runOnOperation() override {
     GreedyRewriteConfig config;
-    config.strictMode = GreedyRewriteStrictness::ExistingOps;
+    config.setStrictness(GreedyRewriteStrictness::ExistingOps);
     if (failed(applyPatternsGreedily(getOperation(), std::move(patterns),
                                      config))) {
       signalPassFailure();
diff --git a/stablehlo/transforms/conversions/CMakeLists.txt b/stablehlo/transforms/conversions/CMakeLists.txt
index e1da2c8b..9071eb4b 100644
--- a/stablehlo/transforms/conversions/CMakeLists.txt
+++ b/stablehlo/transforms/conversions/CMakeLists.txt
@@ -18,7 +18,7 @@ add_mlir_library(StablehloTypeConversion
   TypeConversion.cpp

   LINK_LIBS PUBLIC
-  LLVMSupport
+  # LLVMSupport
   MLIRIR
   MLIRSupport
   MLIRTransformUtils
