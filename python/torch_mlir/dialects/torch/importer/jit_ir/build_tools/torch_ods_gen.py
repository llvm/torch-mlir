# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# Also available under a BSD-style license. See LICENSE.
"""Queries the pytorch op registry and generates ODS and CC sources for the ops.
"""

from typing import Any, Dict, List, Optional, TextIO, Sequence, Tuple, Union

import argparse
from contextlib import contextmanager
import importlib
import io
import itertools
import logging
import os
import pprint
import re
import sys
import textwrap
import traceback

# Note that this utility exists only in the c-extension.
from torch_mlir._mlir_libs._jit_ir_importer import get_registered_ops # pytype: disable=import-error


class TextEmitter:
    """Helper for emitting text files"""
    _INDENT = "  "

    def __init__(self, out: TextIO):
        super().__init__()
        self.out = out
        self.indent_level = 0

    @contextmanager
    def indent(self, level: int = 1):
        self.indent_level += level
        yield
        self.indent_level -= level
        assert self.indent_level >= 0, "Unbalanced indentation"

    def print(self, s: str):
        current_indent = self._INDENT * self.indent_level
        for line in s.splitlines():
            self.out.write(current_indent + line + "\n")

    def quote(self, s: str) -> str:
        s = s.replace(r'"', r'\\"')
        return f'"{s}"'

    def quote_multiline_docstring(self, s: str, indent_level: int = 0) -> str:
        # TODO: Possibly find a python module to markdown the docstring for
        # better document generation.
        # Unlikely to contain the delimiter and since just a docstring, be safe.
        s = s.replace("}]", "")
        # Strip each line.
        s = "\n".join([l.rstrip() for l in s.splitlines()])
        indent = self._INDENT * indent_level
        s = textwrap.indent(s, indent + self._INDENT)
        return "[{\n" + s + "\n" + indent + "}]"


class JitOperator:
    """Information about a single registered `torch::jit::Operator`"""
    def __init__(self, op_info: "OP_INFO_DICT"):
        """Create a JitOperator from the raw OP_INFO_DICT extracted from
        the PyTorch JIT operator registry.
        """
        namespace, _, unqualified_name = op_info["name"][0].partition("::")
        self.namespace = namespace
        self.unqualified_name = unqualified_name
        self.overload_name = op_info["name"][1]
        self.is_c10_op = op_info["is_c10_op"]
        self.is_vararg = op_info["is_vararg"]
        self.is_varret = op_info["is_varret"]
        self.is_mutable = op_info["is_mutable"]
        self.arguments = op_info["arguments"]
        self.returns = op_info["returns"]

        self.unique_key = self.create_unique_key()

    def create_unique_key(self) -> str:
        """Create a unique, human-readable key for this JitOperator.

        The key consists of the operator name and its overload name, which
        together form a unique identifier. We also redundantly
        append a signature to the end, which gives some robustness to changes
        in PyTorch and also generally makes things more readable.
        The format is:
        ```
            namespace::unqualified_name[.overload_name] : (type1,type2) -> (type3,type4)
        ```
        This is a modified version of the signature strings seen throughout
        PyTorch. The main difference is the inclusion of return types and the
        extra spacing and `:`. E.g.the above would be just:
        ```
          namespace::kernel_name[.overload_name](type1,type2)
        ```
        (PyTorch doesn't canonically include the result types since they don't
        participate in their dispatch overload resolution, which is of primary
        concern for them)
        """
        overload = "" if not self.overload_name else f".{self.overload_name}"
        if self.is_vararg:
            arg_str = "..."
        else:
            arg_str = ", ".join(arg["type"] for arg in self.arguments)
        if self.is_varret:
            ret_str = "..."
        else:
            ret_str = ", ".join(ret["type"] for ret in self.returns)
        return f"{self.namespace}::{self.unqualified_name}{overload} : ({arg_str}) -> ({ret_str})"

    @property
    def triple(self):
        """Returns the unique 3-tuple identifying this operator.

        This is a useful alternative to the "unique name" for programmatic
        access, such as when needing to convert one op to a related op by
        a programmatic transformation of the triple.
        """
        return self.namespace, self.unqualified_name, self.overload_name

    def get_mlir_names(self):
        """Gets the MLIR op name (excluding `torch.`) and td def name.

        Not all ops are necessarily registered or in the .td file, but these
        are useful in the repr for cross referencing, and it's useful to have
        them in a single point of truth.
        """
        def uppercase_first_letter(s):
            if not s:
                return s
            return s[0].upper() + s[1:]

        op_name_atoms = [self.namespace, self.unqualified_name]
        if self.overload_name:
            op_name_atoms.append(self.overload_name)
        op_name = ".".join(op_name_atoms)

        op_class_name_atoms = []
        for op_name_atom in op_name_atoms:
            for s in op_name_atom.split("_"):
                op_class_name_atoms.append(s if s else "_")
        td_def_name = "Torch_" + "".join(
            uppercase_first_letter(s) for s in op_class_name_atoms) + "Op"
        return op_name, td_def_name

    def __repr__(self):
        f = io.StringIO()
        emitter = TextEmitter(f)
        p = lambda *args: emitter.print(*args)
        p(f"JitOperator '{self.unique_key}':")
        with emitter.indent():

            # Emit the MLIR names to allow easy reverse lookup if starting
            # from an unregistered op.
            op_name, td_def_name = self.get_mlir_names()
            p(f"MLIR op name = torch.{op_name}")
            p(f"MLIR td def name = {td_def_name}")

            p(f"namespace = {self.namespace}")
            p(f"unqualified_name = {self.unqualified_name}")
            p(f"overload_name = {self.overload_name}")
            p(f"is_c10_op = {self.is_c10_op}")
            p(f"is_vararg = {self.is_vararg}")
            p(f"is_varret = {self.is_varret}")
            p(f"is_mutable = {self.is_mutable}")
            if not self.arguments:
                p("arguments = []")
            else:
                p("arguments:")
                with emitter.indent():
                    for arg in self.arguments:
                        p(f"arg: {arg}")
            if not self.returns:
                p("returns = []")
            else:
                p("returns:")
                with emitter.indent():
                    for ret in self.returns:
                        p(f"ret: {ret}")
        return f.getvalue()


class Registry:
    """An indexed collection of JitOperators"""
    def __init__(self, operators: List[JitOperator]):
        self.by_unique_key = {}
        self.by_triple = {}
        for o in operators:
            self.by_unique_key[o.unique_key] = o
            self.by_triple[o.triple] = o

    def __getitem__(self, key: str):
        """Looks up a JitOperator by its "unique key"."""
        return self.by_unique_key[key]

    def get_by_triple(self, key: Tuple[str, str, str]):
        """Looks up a JitOperator by its unique "triple"."""
        return self.by_triple[key]


# A List[Dict[str, _]] mapping attribute names to:
#   - str (e.g. {'name': 'dim'} )
#   - int (e.g. {'N': 1} )
#   - Dict[str, List[str]]
#       (e.g. {'alias_info': {'before': ['alias::a'], 'after': ['alias::a']}} )
SIGLIST_TYPE = List[Dict[str, Union[str, int, Dict[str, List[str]]]]]
# A Dict[str, _] describing a registered op. Each field is either
#   - bool (e.g. {'is_mutable': False} )
#   - Tuple[str] (e.g. {'name': ('aten::size', 'int')} )
#   - SIGLIST_TYPE (e.g. {'arguments': [...], 'returns': [...]} )
OP_INFO_DICT = Dict[str, Union[bool, Tuple[str], SIGLIST_TYPE]]

# Mapping from torch types to their corresponding ODS type predicates.
# Use `get_ods_type` instead of using this directly.
TORCH_TYPE_TO_ODS_TYPE = {
    "Tensor": "AnyTorchTensorType",
    "Tensor?": "AnyTorchOptionalTensorType",
    "Tensor?[]": "AnyTorchListOptionalTensorType",
    "Tensor[]": "AnyTorchTensorListType",
    "Scalar": "AnyTorchScalarType",
    "Scalar[]": "AnyTorchScalarListType",
    "Scalar?": "AnyTorchOptionalScalarType",
    "int": "Torch_IntType",
    "int[]": "TorchIntListType",
    "int[]?": "TorchOptionalIntListType",
    "int?": "TorchOptionalIntType",
    "bool": "Torch_BoolType",
    "bool[]": "TorchBoolListType",
    "bool?": "TorchOptionalBoolType",
    "float": "Torch_FloatType",
    "float[]": "TorchFloatListType",
    "float[]?": "TorchOptionalFloatListType",
    "float?": "TorchOptionalFloatType",
    "t[]": "AnyTorchListType",
    "t": "AnyTorchType",
    "t1": "AnyTorchType",
    "t2": "AnyTorchType",
    "Any": "AnyTorchType",
    "Device": "Torch_DeviceType",
    "Device?": "TorchOptionalDeviceType",
    "str": "Torch_StringType",
    "str?": "TorchOptionalStringType",
    "str[]": "TorchStringListType",
    "str[]?": "TorchOptionalStringListType",
    "Dict": "Torch_DictType",
    "__torch__.torch.classes.quantized.LinearPackedParamsBase": "Torch_LinearParamsType",
}


def get_ods_type(type: str):
    # TODO: Increase precision on dict type modeling.
    if type.startswith("Dict("):
      type = "Dict"
    ods_type = TORCH_TYPE_TO_ODS_TYPE.get(type)
    if ods_type is None:
        raise Exception(
            f"{type!r} not in TORCH_TYPE_TO_ODS_TYPE mapping. Please add it!")
    return ods_type


def _get_main_module_name() -> str:
    # pytype: disable=attribute-error
    return sys.modules["__main__"].__loader__.name
    # pytype: enable=attribute-error


ODS_BANNER = "\n".join([
    "//===-------------------------------------------------------*- tablegen -*-===//",
    "//",
    "// This file is licensed under the Apache License v2.0 with LLVM Exceptions.",
    "// See https://llvm.org/LICENSE.txt for license information.",
    "// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception",
    "// Also available under a BSD-style license. See LICENSE.",
    "//",
    "// Operation summaries and descriptions were systematically derived from public",
    "// API docstrings and are licensed accordingly:",
    "//   https://github.com/pytorch/pytorch/blob/master/LICENSE",
    "//===----------------------------------------------------------------------===//",
    "//",
    "// This file is automatically generated.  Please do not edit.",
    "// Generated via:",
    f"//   python -m {_get_main_module_name()}",
    "//",
    "//===----------------------------------------------------------------------===//",
    "",
    "",
])


def raw_emit_op(operator: JitOperator, f: TextIO, *, traits: List[str],
                has_folder: bool, has_canonicalizer: bool):
    """Emit the ODS for a JitOperator to a textual file.

    This is the lowest level of emission and is responsible for low-level
    textual emission details. This function should not have any "smarts"
    for deducing traits/etc.

    You probably don't want to call this directly.
    """
    emitter = TextEmitter(f)
    p = lambda *args: emitter.print(*args)
    op_name, td_def_name = operator.get_mlir_names()

    # Generate unique result names for ops with nameless results
    multiple_results = len(operator.returns) > 1
    generic_result_name = lambda i: "result" + (str(i) if multiple_results else "")

    # Generate unique operand and result names by replacing common result name with nameless results
    for return_name in operator.returns:
        if return_name['name'] in list(operand['name'] for operand in operator.arguments):
            return_name['name'] = "res_" + return_name['name']

    p(f"def {td_def_name} : Torch_Op<{emitter.quote(op_name)}, [")
    with emitter.indent():
        with emitter.indent():
            p(",\n".join(traits))
        p("]> {")
    with emitter.indent():
        summary = f"Generated op for `{operator.unique_key}`"
        p(f"let summary = {emitter.quote(summary)};")
        p(f"let arguments = (ins")
        with emitter.indent():
            if operator.is_vararg:
                p("Variadic<AnyTorchType>:$operands")
            else:
                p(",\n".join([
                    f"""{get_ods_type(arg["type"])}:${arg["name"]}"""
                    for arg in operator.arguments
                ]))
        p(");")
        p(f"let results = (outs")
        with emitter.indent():
            if operator.is_varret:
                p("Variadic<AnyTorchType>:$results")
            else:
                p(",\n".join([
                    f"""{get_ods_type(ret["type"])}:${ret["name"] or generic_result_name(e)}"""
                    for e, ret in enumerate(operator.returns)
                ]))
        p(");")

        if operator.is_vararg:
            assembly_operands = "`(` $operands `)`"
            assembly_operand_types = "type($operands)"
        else:
            assembly_operands = " `,` ".join("$" + arg["name"]
                                             for arg in operator.arguments)
            assembly_operand_types = " `,` ".join(
                f"""type(${arg["name"]})""" for arg in operator.arguments)
        if operator.is_varret:
            assembly_result_types = "type($results)"
        else:
            assembly_result_types = " `,` ".join(
                f"""type(${ret["name"] or generic_result_name(e)})"""
                for e, ret in enumerate(operator.returns))
        if assembly_operand_types and assembly_result_types:
            maybe_arrow = " `->` "
        else:
            maybe_arrow = ""
        assembly_format = f"{assembly_operands} attr-dict `:` {assembly_operand_types}{maybe_arrow}{assembly_result_types}"
        p(f"let assemblyFormat = {emitter.quote(assembly_format)};")
        if has_folder:
            p("let hasFolder = 1;")
        if has_canonicalizer:
            p("let hasCanonicalizer = 1;")
    p("}")
    p("\n")


def emit_op(operator: JitOperator,
            f: TextIO,
            *,
            traits: Optional[List[str]] = None,
            has_folder: bool = False,
            has_canonicalizer: bool = False):
    """Main entry point for op emission.

    Besides emitting the op, it deduces / adds traits based on the operator
    information.
    """
    if traits is None:
        traits = []

    # All Torch operators allow type refinement.
    traits += ["AllowsTypeRefinement"]
    # If no operands have aliasing relations, then the op has value semantics.
    # Note that this is different from MLIR's NoSideEffect which is much
    # stronger (for example, it cannot be applied to ops that might emit errors
    # when operand shapes mismatch).
    if not operator.is_vararg and not operator.is_varret and all(
            "alias_info" not in x
            for x in itertools.chain(operator.arguments, operator.returns)):
      # It seems the FunctionSchema of "prim::unchecked_cast : (t) -> (t)" has
      # incorrect alias information. The result can alias with other tensors
      # but the alias annotation is empty.
      if operator.unique_key != "prim::unchecked_cast : (t) -> (t)":
          traits += ["HasValueSemantics"]

    raw_emit_op(operator,
                f,
                traits=traits,
                has_folder=has_folder,
                has_canonicalizer=has_canonicalizer)


def emit_prim_ops(torch_ir_dir: str, registry: Registry):
    td_file = os.path.join(torch_ir_dir, "GeneratedPrimOps.td")
    with open(td_file, "w") as f:
        f.write(ODS_BANNER)

        def emit(key, **kwargs):
            emit_op(registry[key], f, **kwargs)

        emit("prim::layout : (Tensor) -> (int)")
        emit("prim::TupleIndex : (Any, int) -> (Any)", has_canonicalizer=True)
        emit("prim::device : (Tensor) -> (Device)")
        emit("prim::dtype : (Tensor) -> (int)", has_folder=True)
        emit("prim::TupleUnpack : (Any) -> (...)", has_canonicalizer=True)
        emit("prim::NumToTensor.Scalar : (Scalar) -> (Tensor)")
        emit("prim::min.self_int : (int[]) -> (int)")
        emit("prim::min.int : (int, int) -> (int)")
        emit("prim::max.self_int : (int[]) -> (int)")
        emit("prim::max.int : (int, int) -> (int)")
        emit("prim::RaiseException : (str) -> ()")
        emit("prim::Uninitialized : () -> (Any)", has_canonicalizer=True)
        emit("prim::unchecked_cast : (t) -> (t)",
             traits=["DeclareOpInterfaceMethods<CastOpInterface>"])
        emit("prim::Print : (...) -> ()")
        emit("prim::tolist : (...) -> (...)")


def emit_aten_ops(torch_ir_dir: str, registry: Registry):
    # Note the deliberate lowercasing of the "t" for consistency with all
    # the name munging. This is not load bearing, but is convenient for
    # consistency.
    td_file = os.path.join(torch_ir_dir, "GeneratedAtenOps.td")
    with open(td_file, "w") as f:
        f.write(ODS_BANNER)

        def emit(key, **kwargs):
            emit_op(registry[key], f, **kwargs)

        def emit_with_mutating_variants(key, **kwargs):
            operator = registry[key]
            emit_op(operator, f, **kwargs)
            ns, unqual, overload = operator.triple
            emit_op(registry.get_by_triple((ns, unqual + "_", overload)),
                    f,
                    traits=["IsTrailingUnderscoreInplaceVariant"])

        # Elementwise tensor compute ops
        for key in [
                "aten::tanh : (Tensor) -> (Tensor)",
                "aten::relu : (Tensor) -> (Tensor)",
                "aten::leaky_relu : (Tensor, Scalar) -> (Tensor)",
                "aten::log : (Tensor) -> (Tensor)",
                "aten::sigmoid : (Tensor) -> (Tensor)",
                "aten::sin : (Tensor) -> (Tensor)",
                "aten::exp : (Tensor) -> (Tensor)",
                "aten::cos : (Tensor) -> (Tensor)",
                "aten::neg : (Tensor) -> (Tensor)",
                "aten::floor : (Tensor) -> (Tensor)",
                "aten::ceil : (Tensor) -> (Tensor)",
                "aten::bitwise_not : (Tensor) -> (Tensor)",
                "aten::add.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)",
                "aten::sub.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)",
                "aten::mul.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::div.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::lerp.Tensor : (Tensor, Tensor, Tensor) -> (Tensor)",
                "aten::eq.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::gt.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::lt.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::ne.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::add.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)",
                "aten::sub.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)",
                "aten::mul.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::div.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::ne.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::eq.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::gt.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::ge.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::lt.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::fmod.Scalar : (Tensor, Scalar) -> (Tensor)",
                "aten::masked_fill.Scalar : (Tensor, Tensor, Scalar) -> (Tensor)",
                "aten::clamp : (Tensor, Scalar?, Scalar?) -> (Tensor)",
                "aten::log2 : (Tensor) -> (Tensor)",
                "aten::rsqrt : (Tensor) -> (Tensor)",
                "aten::abs : (Tensor) -> (Tensor)",
                "aten::reciprocal : (Tensor) -> (Tensor)",
                "aten::bitwise_and.Tensor : (Tensor, Tensor) -> (Tensor)",
                "aten::threshold : (Tensor, Scalar, Scalar) -> (Tensor)",

        ]:
            emit_with_mutating_variants(key)
        # Elementwise tensor compute ops that don't have the standard mutating
        # variants.
        emit("aten::addcmul : (Tensor, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::addcdiv : (Tensor, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::maximum : (Tensor, Tensor) -> (Tensor)")
        emit("aten::minimum : (Tensor, Tensor) -> (Tensor)")
        emit("aten::rsub.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::gelu : (Tensor) -> (Tensor)")
        emit("aten::pow.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::threshold_backward : (Tensor, Tensor, Scalar) -> (Tensor)")

        emit_with_mutating_variants("aten::triu : (Tensor, int) -> (Tensor)")
        emit_with_mutating_variants("aten::index_put : (Tensor, Tensor?[], Tensor, bool) -> (Tensor)")

        # Non-elementwise tensor compute ops
        emit("aten::linear : (Tensor, Tensor, Tensor?) -> (Tensor)")
        emit("aten::mm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::addmm : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::matmul : (Tensor, Tensor) -> (Tensor)")
        emit(
            "aten::conv2d : (Tensor, Tensor, Tensor?, int[], int[], int[], int) -> (Tensor)"
        )
        emit(
            "aten::batch_norm : (Tensor, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, float, bool) -> (Tensor)"
        )
        emit(
            "aten::layer_norm : (Tensor, int[], Tensor?, Tensor?, float, bool) -> (Tensor)"
        )
        emit (
            "aten::native_layer_norm : (Tensor, int[], Tensor?, Tensor?, float) -> (Tensor, Tensor, Tensor)"
        )
        emit(
            "aten::max_pool2d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)"
        )
        emit(
            "aten::softmax.int : (Tensor, int, int?) -> (Tensor)"
        )
        emit(
            "aten::log_softmax.int : (Tensor, int, int?) -> (Tensor)"
        )
        emit("aten::adaptive_avg_pool2d : (Tensor, int[]) -> (Tensor)")
        emit("aten::topk : (Tensor, int, int, bool, bool) -> (Tensor, Tensor)")
        emit("aten::transpose.int : (Tensor, int, int) -> (Tensor)")
        emit("aten::permute : (Tensor, int[]) -> (Tensor)")
        emit("aten::bmm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::cumsum : (Tensor, int, int?) -> (Tensor)")
        emit("aten::floor_divide.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::logsumexp : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::mean.dim : (Tensor, int[], bool, int?) -> (Tensor)")
        emit("aten::__and__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::sqrt : (Tensor) -> (Tensor)")
        emit("aten::_softmax : (Tensor, int, bool) -> (Tensor)")
        emit("aten::mean : (Tensor, int?) -> (Tensor)")
        emit("aten::nll_loss_forward : (Tensor, Tensor, Tensor?, int, int) -> (Tensor, Tensor)")

        # Misc tensor ops.
        emit("aten::constant_pad_nd : (Tensor, int[], Scalar) -> (Tensor)")
        emit("aten::squeeze.dim : (Tensor, int) -> (Tensor)", has_folder=True)
        emit("aten::unsqueeze : (Tensor, int) -> (Tensor)")
        emit("aten::squeeze : (Tensor) -> (Tensor)", has_folder=True)
        emit("aten::flatten.using_ints : (Tensor, int, int) -> (Tensor)")
        emit("aten::dim : (Tensor) -> (int)", has_folder=True)
        emit("aten::size : (Tensor) -> (int[])", has_canonicalizer=True)
        emit("aten::fill_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::Bool.Tensor : (Tensor) -> (bool)")
        emit("aten::ones : (int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::zeros : (int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::tensor : (t[], int?, Device?, bool) -> (Tensor)")
        emit("aten::tensor.bool : (bool, int?, Device?, bool) -> (Tensor)")
        emit("aten::tensor.int : (int, int?, Device?, bool) -> (Tensor)")
        emit("aten::_shape_as_tensor : (Tensor) -> (Tensor)")
        emit("aten::all : (Tensor) -> (Tensor)")
        emit("aten::any : (Tensor) -> (Tensor)")
        emit("aten::any.dim : (Tensor, int, bool) -> (Tensor)")
        emit("aten::arange : (Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::arange.start : (Scalar, Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::arange.start_step : (Scalar, Scalar, Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::argmax : (Tensor, int?, bool) -> (Tensor)")
        emit("aten::bucketize.Tensor : (Tensor, Tensor, bool, bool) -> (Tensor)")
        emit("aten::contiguous : (Tensor, int) -> (Tensor)")
        emit("aten::copy_ : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::detach : (Tensor) -> (Tensor)")
        emit("aten::embedding : (Tensor, Tensor, int, bool, bool) -> (Tensor)")
        emit("aten::empty_like : (Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::zeros_like : (Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::ones_like : (Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::empty.memory_format : (int[], int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::expand : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::broadcast_to : (Tensor, int[]) -> (Tensor)")
        emit("aten::index.Tensor : (Tensor, Tensor?[]) -> (Tensor)")
        emit("aten::index_select : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::item : (Tensor) -> (Scalar)")
        emit("aten::masked_select : (Tensor, Tensor) -> (Tensor)")
        emit("aten::numel : (Tensor) -> (int)")
        emit("aten::repeat : (Tensor, int[]) -> (Tensor)")
        emit("aten::reshape : (Tensor, int[]) -> (Tensor)")
        emit("aten::resize_ : (Tensor, int[], int?) -> (Tensor)")
        emit("aten::select.int : (Tensor, int, int) -> (Tensor)")
        emit("aten::size.int : (Tensor, int) -> (int)", has_folder=True)
        emit("aten::stack : (Tensor[], int) -> (Tensor)")
        emit("aten::sum : (Tensor, int?) -> (Tensor)")
        emit("aten::sum.dim_IntList : (Tensor, int[], bool, int?) -> (Tensor)")
        emit("aten::to.dtype : (Tensor, int, bool, bool, int?) -> (Tensor)", has_folder=True)
        emit("aten::to.other : (Tensor, Tensor, bool, bool, int?) -> (Tensor)")
        emit("aten::to.prim_Device : (Tensor, Device?, int?, bool, bool) -> (Tensor)")
        emit("aten::type_as : (Tensor, Tensor) -> (Tensor)")
        emit("aten::view : (Tensor, int[]) -> (Tensor)", has_folder=True)
        emit("aten::where.self : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::slice.Tensor : (Tensor, int, int?, int?, int) -> (Tensor)")
        emit("aten::len.Tensor : (Tensor) -> (int)")
        emit("aten::cpu : (Tensor) -> (Tensor)")
        emit("aten::gather : (Tensor, int, Tensor, bool) -> (Tensor)")
        emit("aten::IntImplicit : (Tensor) -> (int)")
        emit("aten::tensor.float : (float, int?, Device?, bool) -> (Tensor)")
        emit("aten::Int.Tensor : (Tensor) -> (int)", has_folder=True)
        emit("aten::dropout : (Tensor, float, bool) -> (Tensor)")
        emit("aten::t : (Tensor) -> (Tensor)")

        # Dict ops.
        emit("aten::__contains__.str : (Dict(str, t), str) -> (bool)", has_folder=True)
        emit("aten::__getitem__.Dict_str : (Dict(str, t), str) -> (t)", has_folder=True)
        emit("aten::_set_item.str : (Dict(str, t), str, t) -> ()")
        emit("aten::keys.str : (Dict(str, t)) -> (str[])")
        emit("aten::get.default_str : (Dict(str, t), str, t) -> (t)")
        emit("aten::Delete.Dict_str : (Dict(str, t), str) -> ()")

        # List ops.
        emit("aten::cat : (Tensor[], int) -> (Tensor)")
        emit("aten::append.t : (t[], t) -> (t[])")
        emit("aten::add.t : (t[], t[]) -> (t[])")
        emit("aten::eq.int_list : (int[], int[]) -> (bool)")
        emit("aten::list.t : (t[]) -> (t[])")
        emit("aten::slice.t : (t[], int?, int?, int) -> (t[])")

        # Str ops.
        emit("aten::add.str : (str, str) -> (str)")
        emit("aten::eq.str : (str, str) -> (bool)", has_folder=True)
        emit("aten::str : (t) -> (str)")
        emit("aten::format : (...) -> (str)")
        emit("aten::join : (str, str[]) -> (str)")

        # Type conversion ops.
        emit("aten::Float.Scalar : (Scalar) -> (float)")
        emit("aten::Float.str : (str) -> (float)")
        emit("aten::Int.float : (float) -> (int)")

        # Primitive ops
        emit("aten::gt.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::ge.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::lt.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::le.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::ne.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::eq.int : (int, int) -> (bool)", has_folder=True)
        emit("aten::floordiv.int : (int, int) -> (int)", has_folder=True)
        emit("aten::remainder.int : (int, int) -> (int)", has_folder=True)
        emit("aten::add.int : (int, int) -> (int)", has_folder=True)
        emit("aten::sub.int : (int, int) -> (int)", has_folder=True)
        emit("aten::mul.int : (int, int) -> (int)", has_folder=True)
        emit("aten::neg.int : (int) -> (int)", has_folder=True)
        emit("aten::log.int : (int) -> (float)")
        emit("aten::add.float_int : (float, int) -> (float)")
        emit("aten::mul.float : (float, float) -> (float)")
        emit("aten::neg.float : (float) -> (float)")
        emit("aten::lt.float_int : (float, int) -> (bool)")
        emit("aten::eq.float : (float, float) -> (bool)", has_folder=True)
        emit("aten::__and__.bool : (bool, bool) -> (bool)")
        emit("aten::ne.bool : (bool, bool) -> (bool)", has_folder=True)
        emit("aten::__is__ : (t1, t2) -> (bool)", has_folder=True)
        emit("aten::__isnot__ : (t1, t2) -> (bool)", has_folder=True)
        emit("aten::__not__ : (bool) -> (bool)", has_folder=True)
        emit("aten::len.t : (t[]) -> (int)",
             has_folder=True,
             has_canonicalizer=True)
        emit("aten::__getitem__.t : (t[], int) -> (t)", has_canonicalizer=True)
        emit("aten::_set_item.t : (t[], int, t) -> (t[])")
        emit("aten::div : (Scalar, Scalar) -> (float)")
        emit("aten::eq.device : (Device, Device) -> (bool)")

        # backprop ops
        emit("aten::_softmax_backward_data : (Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::tanh_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::gelu_backward : (Tensor, Tensor) -> (Tensor)")

        #core ops
        #TODO(Yi Zhang): Add support for RNG ops
        emit("aten::_log_softmax_backward_data : (Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::sparse_mask : (Tensor, Tensor) -> (Tensor)")
        emit("aten::int_repr : (Tensor) -> (Tensor)")
        emit("aten::q_per_channel_zero_points : (Tensor) -> (Tensor)")
        emit("aten::q_per_channel_scales : (Tensor) -> (Tensor)")
        emit("aten::to_dense : (Tensor, int?) -> (Tensor)")
        emit("aten::hspmm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::col_indices : (Tensor) -> (Tensor)")
        emit("aten::crow_indices : (Tensor) -> (Tensor)")
        emit("aten::indices : (Tensor) -> (Tensor)")
        emit("aten::values : (Tensor) -> (Tensor)")
        emit("aten::unflatten_dense_tensors : (Tensor, Tensor[]) -> (Tensor[])")
        emit("aten::flatten_dense_tensors : (Tensor[]) -> (Tensor)")
        emit("aten::pad_sequence : (Tensor[], bool, float) -> (Tensor)")
        emit("aten::linalg_matrix_power : (Tensor, int) -> (Tensor)")
        emit("aten::linalg_norm : (Tensor, Scalar?, int[]?, bool, int?) -> (Tensor)")
        emit("aten::linalg_norm.ord_str : (Tensor, str, int[]?, bool, int?) -> (Tensor)")
        emit("aten::ger : (Tensor, Tensor) -> (Tensor)")
        emit("aten::outer : (Tensor, Tensor) -> (Tensor)")
        emit("aten::inner : (Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_matmul : (Tensor, Tensor) -> (Tensor)")
        emit("aten::det : (Tensor) -> (Tensor)")
        emit("aten::linalg_det : (Tensor) -> (Tensor)")
        emit("aten::fft_ifftshift : (Tensor, int[]?) -> (Tensor)")
        emit("aten::fft_fftshift : (Tensor, int[]?) -> (Tensor)")
        emit("aten::fft_ihfftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::fft_hfftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::fft_ihfft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::fft_hfft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::special_softmax : (Tensor, int, int?) -> (Tensor)")
        emit("aten::special_multigammaln : (Tensor, int) -> (Tensor)")
        emit("aten::special_gammaincc : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_gammainc : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_log_softmax : (Tensor, int, int?) -> (Tensor)")
        emit("aten::special_log1p : (Tensor) -> (Tensor)")
        emit("aten::special_round : (Tensor) -> (Tensor)")
        emit("aten::special_sinc : (Tensor) -> (Tensor)")
        emit("aten::special_expit : (Tensor) -> (Tensor)")
        emit("aten::special_logsumexp : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::special_polygamma : (int, Tensor) -> (Tensor)")
        emit("aten::special_logit : (Tensor, float?) -> (Tensor)")
        emit("aten::special_i0 : (Tensor) -> (Tensor)")
        emit("aten::special_xlogy : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlogy.self_scalar : (Scalar, Tensor) -> (Tensor)")
        emit("aten::special_xlogy.other_scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::special_ndtr : (Tensor) -> (Tensor)")
        emit("aten::special_erfinv : (Tensor) -> (Tensor)")
        emit("aten::special_erfc : (Tensor) -> (Tensor)")
        emit("aten::special_erf : (Tensor) -> (Tensor)")
        emit("aten::special_gammaln : (Tensor) -> (Tensor)")
        emit("aten::special_digamma : (Tensor) -> (Tensor)")
        emit("aten::special_psi : (Tensor) -> (Tensor)")
        emit("aten::special_exp2 : (Tensor) -> (Tensor)")
        emit("aten::special_expm1 : (Tensor) -> (Tensor)")
        emit("aten::column_stack : (Tensor[]) -> (Tensor)")
        emit("aten::nll_loss_nd : (Tensor, Tensor, Tensor?, int, int) -> (Tensor)")
        emit("aten::float_power.Tensor_Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::float_power.Scalar : (Scalar, Tensor) -> (Tensor)")
        emit("aten::float_power.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::argsort : (Tensor, int, bool) -> (Tensor)")
        emit("aten::argsort.dimname : (Tensor, str, bool) -> (Tensor)")
        emit("aten::msort : (Tensor) -> (Tensor)")
        emit("aten::cross_entropy_loss : (Tensor, Tensor, Tensor?, int, int, float) -> (Tensor)")
        emit("aten::argwhere : (Tensor) -> (Tensor)")
        emit("aten::nonzero_numpy : (Tensor) -> (Tensor[])")
        emit("aten::take_along_dim : (Tensor, Tensor, int?) -> (Tensor)")
        emit("aten::less.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::less.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::greater.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::greater.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::less_equal.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::less_equal.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::greater_equal.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::greater_equal.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::not_equal.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::not_equal.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::index_add : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_add.alpha : (Tensor, int, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_add.dimname : (Tensor, str, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::put : (Tensor, Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::masked_scatter : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::quantized_rnn_tanh_cell : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Scalar, Scalar) -> (Tensor)")
        emit("aten::quantized_rnn_relu_cell : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Scalar, Scalar) -> (Tensor)")
        emit("aten::quantized_gru_cell : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Scalar, Scalar) -> (Tensor)")
        emit("aten::quantized_lstm_cell : (Tensor, Tensor[], Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Scalar, Scalar) -> (Tensor, Tensor)")
        emit("aten::rnn_relu.input : (Tensor, Tensor, Tensor[], bool, int, float, bool, bool, bool) -> (Tensor, Tensor)")
        emit("aten::rnn_relu.data : (Tensor, Tensor, Tensor, Tensor[], bool, int, float, bool, bool) -> (Tensor, Tensor)")
        emit("aten::rnn_tanh.input : (Tensor, Tensor, Tensor[], bool, int, float, bool, bool, bool) -> (Tensor, Tensor)")
        emit("aten::rnn_tanh.data : (Tensor, Tensor, Tensor, Tensor[], bool, int, float, bool, bool) -> (Tensor, Tensor)")
        emit("aten::gru.input : (Tensor, Tensor, Tensor[], bool, int, float, bool, bool, bool) -> (Tensor, Tensor)")
        emit("aten::gru.data : (Tensor, Tensor, Tensor, Tensor[], bool, int, float, bool, bool) -> (Tensor, Tensor)")
        emit("aten::lstm.input : (Tensor, Tensor[], Tensor[], bool, int, float, bool, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::lstm.data : (Tensor, Tensor, Tensor[], Tensor[], bool, int, float, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::combinations : (Tensor, int, bool) -> (Tensor)")
        emit("aten::cartesian_prod : (Tensor[]) -> (Tensor)")
        emit("aten::meshgrid : (Tensor[]) -> (Tensor[])")
        emit("aten::meshgrid.indexing : (Tensor[], str) -> (Tensor[])")
        emit("aten::choose_qparams_optimized : (Tensor, int, int, float, int) -> (Tensor, Tensor)")
        emit("aten::fake_quantize_per_channel_affine : (Tensor, Tensor, Tensor, int, int, int) -> (Tensor)")
        emit("aten::coalesce : (Tensor) -> (Tensor)")
        emit("aten::subtract.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::subtract.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::positive : (Tensor) -> (Tensor)")
        emit("aten::norm_except_dim : (Tensor, int, int) -> (Tensor)")
        emit("aten::where.ScalarSelf : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::where.ScalarOther : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::where.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::where : (Tensor) -> (Tensor[])")
        emit("aten::fix : (Tensor) -> (Tensor)")
        emit("aten::trapz.x : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::trapz.dx : (Tensor, float, int) -> (Tensor)")
        emit("aten::trapezoid.x : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::trapezoid.dx : (Tensor, Scalar, int) -> (Tensor)")
        emit("aten::flipud : (Tensor) -> (Tensor)")
        emit("aten::fliplr : (Tensor) -> (Tensor)")
        emit("aten::one_hot : (Tensor, int) -> (Tensor)")
        emit("aten::tile : (Tensor, int[]) -> (Tensor)")
        emit("aten::sum_to_size : (Tensor, int[]) -> (Tensor)")
        emit("aten::istft : (Tensor, int, int?, int?, Tensor?, bool, bool, bool?, int?, bool) -> (Tensor)")
        emit("aten::dstack : (Tensor[]) -> (Tensor)")
        emit("aten::vstack : (Tensor[]) -> (Tensor)")
        emit("aten::hstack : (Tensor[]) -> (Tensor)")
        emit("aten::smm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::relu6 : (Tensor) -> (Tensor)")
        emit("aten::negative : (Tensor) -> (Tensor)")
        emit("aten::ravel : (Tensor) -> (Tensor)")
        emit("aten::pin_memory : (Tensor, Device?) -> (Tensor)")
        emit("aten::pixel_unshuffle : (Tensor, int) -> (Tensor)")
        emit("aten::pixel_shuffle : (Tensor, int) -> (Tensor)")
        emit("aten::adjoint : (Tensor) -> (Tensor)")
        emit("aten::moveaxis.intlist : (Tensor, int[], int[]) -> (Tensor)")
        emit("aten::moveaxis.int : (Tensor, int, int) -> (Tensor)")
        emit("aten::pairwise_distance : (Tensor, Tensor, float, float, bool) -> (Tensor)")
        emit("aten::multiply.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::multiply.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::nanmean : (Tensor, int[], bool, int?) -> (Tensor)")
        emit("aten::matrix_exp : (Tensor) -> (Tensor)")
        emit("aten::matrix_power : (Tensor, int) -> (Tensor)")
        emit("aten::ldexp.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fbgemm_pack_quantized_matrix : (Tensor) -> (Tensor)")
        emit("aten::fbgemm_pack_quantized_matrix.KN : (Tensor, int, int) -> (Tensor)")
        emit("aten::fbgemm_linear_fp16_weight : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::fbgemm_linear_fp16_weight_fp32_activation : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::fbgemm_pack_gemm_matrix_fp16 : (Tensor) -> (Tensor)")
        emit("aten::fbgemm_linear_quantize_weight : (Tensor) -> (Tensor, Tensor, float, int)")
        emit("aten::fbgemm_linear_int8_weight : (Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::fbgemm_linear_int8_weight_fp32_activation : (Tensor, Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::kron : (Tensor, Tensor) -> (Tensor)")
        emit("aten::isreal : (Tensor) -> (Tensor)")
        emit("aten::isclose : (Tensor, Tensor, float, float, bool) -> (Tensor)")
        emit("aten::new_ones : (Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::new_full : (Tensor, int[], Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::embedding_bag : (Tensor, Tensor, Tensor, bool, int, bool, Tensor?, bool) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::embedding_bag.padding_idx : (Tensor, Tensor, Tensor, bool, int, bool, Tensor?, bool, int?) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::row_stack : (Tensor[]) -> (Tensor)")
        emit("aten::einsum : (str, Tensor[]) -> (Tensor)")
        emit("aten::divide.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::divide.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::divide.Tensor_mode : (Tensor, Tensor, str?) -> (Tensor)")
        emit("aten::divide.Scalar_mode : (Tensor, Scalar, str?) -> (Tensor)")
        emit("aten::gradient.scalarint : (Tensor, Scalar?, int?, int) -> (Tensor[])")
        emit("aten::gradient.scalararray : (Tensor, Scalar, int[], int) -> (Tensor[])")
        emit("aten::gradient.array : (Tensor, int[], int) -> (Tensor[])")
        emit("aten::gradient.scalarrayint : (Tensor, Scalar[], int?, int) -> (Tensor[])")
        emit("aten::gradient.scalarrayarray : (Tensor, Scalar[], int[], int) -> (Tensor[])")
        emit("aten::gradient.tensorarrayint : (Tensor, Tensor[], int?, int) -> (Tensor[])")
        emit("aten::gradient.tensorarray : (Tensor, Tensor[], int[], int) -> (Tensor[])")
        emit("aten::diff : (Tensor, int, int, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::diag_embed : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::cumulative_trapezoid.x : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::cumulative_trapezoid.dx : (Tensor, Scalar, int) -> (Tensor)")
        emit("aten::corrcoef : (Tensor) -> (Tensor)")
        emit("aten::cov : (Tensor, int, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::clip : (Tensor, Scalar?, Scalar?) -> (Tensor)")
        emit("aten::clip.Tensor : (Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::block_diag : (Tensor[]) -> (Tensor)")
        emit("aten::concat : (Tensor[], int) -> (Tensor)")
        emit("aten::concat.names : (Tensor[], str) -> (Tensor)")
        emit("aten::broadcast_tensors : (Tensor[]) -> (Tensor[])")
        emit("aten::atleast_3d : (Tensor) -> (Tensor)")
        emit("aten::atleast_3d.Sequence : (Tensor[]) -> (Tensor[])")
        emit("aten::atleast_2d : (Tensor) -> (Tensor)")
        emit("aten::atleast_2d.Sequence : (Tensor[]) -> (Tensor[])")
        emit("aten::atleast_1d : (Tensor) -> (Tensor)")
        emit("aten::atleast_1d.Sequence : (Tensor[]) -> (Tensor[])")
        emit("aten::arctan : (Tensor) -> (Tensor)")
        emit("aten::arcsin : (Tensor) -> (Tensor)")
        emit("aten::arctanh : (Tensor) -> (Tensor)")
        emit("aten::arcsinh : (Tensor) -> (Tensor)")
        emit("aten::arccos : (Tensor) -> (Tensor)")
        emit("aten::feature_alpha_dropout : (Tensor, float, bool) -> (Tensor)")
        emit("aten::cosh : (Tensor) -> (Tensor)")
        emit("aten::data : (Tensor) -> (Tensor)")
        emit("aten::polar : (Tensor, Tensor) -> (Tensor)")
        emit("aten::complex : (Tensor, Tensor) -> (Tensor)")
        emit("aten::true_divide.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::true_divide.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::resolve_neg : (Tensor) -> (Tensor)")
        emit("aten::resolve_conj : (Tensor) -> (Tensor)")
        emit("aten::var_mean : (Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::var_mean.dim : (Tensor, int[], bool, bool) -> (Tensor, Tensor)")
        emit("aten::var_mean.names_dim : (Tensor, str[], bool, bool) -> (Tensor, Tensor)")
        emit("aten::var_mean.correction : (Tensor, int[]?, int?, bool) -> (Tensor, Tensor)")
        emit("aten::var_mean.correction_names : (Tensor, str[], int?, bool) -> (Tensor, Tensor)")
        emit("aten::conj : (Tensor) -> (Tensor)")
        emit("aten::std_mean : (Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::std_mean.dim : (Tensor, int[], bool, bool) -> (Tensor, Tensor)")
        emit("aten::std_mean.names_dim : (Tensor, str[], bool, bool) -> (Tensor, Tensor)")
        emit("aten::std_mean.correction : (Tensor, int[]?, int?, bool) -> (Tensor, Tensor)")
        emit("aten::std_mean.correction_names : (Tensor, str[], int?, bool) -> (Tensor, Tensor)")
        emit("aten::signbit : (Tensor) -> (Tensor)")
        emit("aten::clone : (Tensor, int?) -> (Tensor)")
        emit("aten::cholesky_inverse : (Tensor, bool) -> (Tensor)")
        emit("aten::rad2deg : (Tensor) -> (Tensor)")
        emit("aten::cholesky : (Tensor, bool) -> (Tensor)")
        emit("aten::polygamma : (int, Tensor) -> (Tensor)")
        emit("aten::nextafter : (Tensor, Tensor) -> (Tensor)")
        emit("aten::min : (Tensor) -> (Tensor)")
        emit("aten::min.dim : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::min.names_dim : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::min.other : (Tensor, Tensor) -> (Tensor)")
        emit("aten::nanmedian : (Tensor) -> (Tensor)")
        emit("aten::nanmedian.dim : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::nanmedian.names_dim : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::median : (Tensor) -> (Tensor)")
        emit("aten::median.dim : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::median.names_dim : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::mean.names_dim : (Tensor, str[], bool, int?) -> (Tensor)")
        emit("aten::quantize_per_channel : (Tensor, Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::unique_dim_consecutive : (Tensor, int, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::max : (Tensor) -> (Tensor)")
        emit("aten::max.dim : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::max.names_dim : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::max.other : (Tensor, Tensor) -> (Tensor)")
        emit("aten::unique_dim : (Tensor, int, bool, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::masked_fill.Tensor : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::logsumexp.names : (Tensor, str[], bool) -> (Tensor)")
        emit("aten::logical_not : (Tensor) -> (Tensor)")
        emit("aten::logaddexp : (Tensor, Tensor) -> (Tensor)")
        emit("aten::blackman_window : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::blackman_window.periodic : (int, bool, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::kthvalue : (Tensor, int, int, bool) -> (Tensor, Tensor)")
        emit("aten::kthvalue.dimname : (Tensor, int, str, bool) -> (Tensor, Tensor)")
        emit("aten::isnan : (Tensor) -> (Tensor)")
        emit("aten::empty_quantized : (int[], Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::logical_xor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::logical_or : (Tensor, Tensor) -> (Tensor)")
        emit("aten::igammac : (Tensor, Tensor) -> (Tensor)")
        emit("aten::logical_and : (Tensor, Tensor) -> (Tensor)")
        emit("aten::igamma : (Tensor, Tensor) -> (Tensor)")
        emit("aten::hypot : (Tensor, Tensor) -> (Tensor)")
        emit("aten::flatten.DimnameList : (Tensor, str[], str) -> (Tensor)")
        emit("aten::flatten.named_out_dim : (Tensor, int, int, str) -> (Tensor)")
        emit("aten::flatten.using_names : (Tensor, str, str, str) -> (Tensor)")
        emit("aten::mode : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::mode.dimname : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::erfc : (Tensor) -> (Tensor)")
        emit("aten::erf : (Tensor) -> (Tensor)")
        emit("aten::deg2rad : (Tensor) -> (Tensor)")
        emit("aten::atanh : (Tensor) -> (Tensor)")
        emit("aten::asinh : (Tensor) -> (Tensor)")
        emit("aten::var : (Tensor, bool) -> (Tensor)")
        emit("aten::var.dim : (Tensor, int[], bool, bool) -> (Tensor)")
        emit("aten::var.names_dim : (Tensor, str[], bool, bool) -> (Tensor)")
        emit("aten::var.correction : (Tensor, int[]?, int?, bool) -> (Tensor)")
        emit("aten::var.correction_names : (Tensor, str[], int?, bool) -> (Tensor)")
        emit("aten::align_to : (Tensor, str[]) -> (Tensor)")
        emit("aten::align_to.ellipsis_idx : (Tensor, str[], int) -> (Tensor)")
        emit("aten::as_strided : (Tensor, int[], int[], int?) -> (Tensor)")
        emit("aten::index_fill.Dimname_Scalar : (Tensor, str, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_fill.Dimname_Tensor : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_fill.int_Scalar : (Tensor, int, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_fill.int_Tensor : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::amax : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::argmin : (Tensor, int?, bool) -> (Tensor)")
        emit("aten::acosh : (Tensor) -> (Tensor)")
        emit("aten::absolute : (Tensor) -> (Tensor)")
        emit("aten::index_copy : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_copy.dimname : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_inv_ex : (Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::linalg_svd : (Tensor, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::affine_grid_generator : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::multilabel_margin_loss_forward : (Tensor, Tensor, int) -> (Tensor, Tensor)")
        emit("aten::solve : (Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::qr : (Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::lstsq : (Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::geqrf : (Tensor) -> (Tensor, Tensor)")
        emit("aten::eig : (Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::cosine_similarity : (Tensor, Tensor, int, float) -> (Tensor)")
        emit("aten::cummin : (Tensor, int) -> (Tensor, Tensor)")
        emit("aten::cummin.dimname : (Tensor, str) -> (Tensor, Tensor)")
        emit("aten::cummax : (Tensor, int) -> (Tensor, Tensor)")
        emit("aten::cummax.dimname : (Tensor, str) -> (Tensor, Tensor)")
        emit("aten::linalg_householder_product : (Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_inv : (Tensor) -> (Tensor)")
        emit("aten::unsafe_split.Tensor : (Tensor, int, int) -> (Tensor[])")
        emit("aten::linalg_solve : (Tensor, Tensor) -> (Tensor)")
        emit("aten::triangular_solve : (Tensor, Tensor, bool, bool, bool) -> (Tensor, Tensor)")
        emit("aten::fft_irfft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::all.dim : (Tensor, int, bool) -> (Tensor)")
        emit("aten::all.dimname : (Tensor, str, bool) -> (Tensor)")
        emit("aten::linalg_lstsq : (Tensor, Tensor, float?, str?) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::fft_ifftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::fft_ifft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::conj_physical : (Tensor) -> (Tensor)")
        emit("aten::ctc_loss.IntList : (Tensor, Tensor, int[], int[], int, int, bool) -> (Tensor)")
        emit("aten::ctc_loss.Tensor : (Tensor, Tensor, Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::softshrink : (Tensor, Scalar) -> (Tensor)")
        emit("aten::selu : (Tensor) -> (Tensor)")
        emit("aten::hardsigmoid : (Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_norm : (Tensor, Scalar, int[], bool, int?) -> (Tensor)")
        emit("aten::linalg_matrix_norm.str_ord : (Tensor, str, int[], bool, int?) -> (Tensor)")
        emit("aten::hardshrink : (Tensor, Scalar) -> (Tensor)")
        emit("aten::elu : (Tensor, Scalar, Scalar, Scalar) -> (Tensor)")
        emit("aten::replication_pad3d : (Tensor, int[]) -> (Tensor)")
        emit("aten::replication_pad2d : (Tensor, int[]) -> (Tensor)")
        emit("aten::replication_pad1d : (Tensor, int[]) -> (Tensor)")
        emit("aten::diagonal_scatter : (Tensor, Tensor, int, int, int) -> (Tensor)")
        emit("aten::reflection_pad2d : (Tensor, int[]) -> (Tensor)")
        emit("aten::reflection_pad1d : (Tensor, int[]) -> (Tensor)")
        emit("aten::fake_quantize_per_channel_affine_cachemask : (Tensor, Tensor, Tensor, int, int, int) -> (Tensor, Tensor)")
        emit("aten::fake_quantize_per_tensor_affine_cachemask : (Tensor, float, int, int, int) -> (Tensor, Tensor)")
        emit("aten::pinverse : (Tensor, float) -> (Tensor)")
        emit("aten::ormqr : (Tensor, Tensor, Tensor, bool, bool) -> (Tensor)")
        emit("aten::orgqr : (Tensor, Tensor) -> (Tensor)")
        emit("aten::matrix_rank : (Tensor, bool) -> (Tensor)")
        emit("aten::matrix_rank.tol : (Tensor, float, bool) -> (Tensor)")
        emit("aten::lu_solve : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::inverse : (Tensor) -> (Tensor)")
        emit("aten::cholesky_solve : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::align_tensors : (Tensor[]) -> (Tensor[])")
        emit("aten::aminmax : (Tensor, int?, bool) -> (Tensor, Tensor)")
        emit("aten::vander : (Tensor, int?, bool) -> (Tensor)")
        emit("aten::fft_rfftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::logcumsumexp : (Tensor, int) -> (Tensor)")
        emit("aten::logcumsumexp.dimname : (Tensor, str) -> (Tensor)")
        emit("aten::histc : (Tensor, int, Scalar, Scalar) -> (Tensor)")
        emit("aten::diag : (Tensor, int) -> (Tensor)")
        emit("aten::nanquantile : (Tensor, Tensor, int?, bool) -> (Tensor)")
        emit("aten::nanquantile.scalar : (Tensor, float, int?, bool) -> (Tensor)")
        emit("aten::nanquantile.new : (Tensor, Tensor, int?, bool, str) -> (Tensor)")
        emit("aten::nanquantile.new_scalar : (Tensor, float, int?, bool, str) -> (Tensor)")
        emit("aten::quantile : (Tensor, Tensor, int?, bool) -> (Tensor)")
        emit("aten::quantile.scalar : (Tensor, float, int?, bool) -> (Tensor)")
        emit("aten::quantile.new : (Tensor, Tensor, int?, bool, str) -> (Tensor)")
        emit("aten::quantile.new_scalar : (Tensor, float, int?, bool, str) -> (Tensor)")
        emit("aten::arccosh : (Tensor) -> (Tensor)")
        emit("aten::fmod.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bincount : (Tensor, Tensor?, int) -> (Tensor)")
        emit("aten::alpha_dropout : (Tensor, float, bool) -> (Tensor)")
        emit("aten::upsample_nearest3d : (Tensor, int[], float?, float?, float?) -> (Tensor)")
        emit("aten::upsample_nearest3d.vec : (Tensor, int[]?, float[]?) -> (Tensor)")
        emit("aten::linalg_eigh : (Tensor, str) -> (Tensor, Tensor)")
        emit("aten::alias : (Tensor) -> (Tensor)")
        emit("aten::upsample_nearest2d : (Tensor, int[], float?, float?) -> (Tensor)")
        emit("aten::upsample_nearest2d.vec : (Tensor, int[]?, float[]?) -> (Tensor)")
        emit("aten::linalg_cholesky_ex : (Tensor, bool, bool) -> (Tensor, Tensor)")
        emit("aten::addr : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::upsample_nearest1d : (Tensor, int[], float?) -> (Tensor)")
        emit("aten::upsample_nearest1d.vec : (Tensor, int[]?, float[]?) -> (Tensor)")
        emit("aten::linalg_qr : (Tensor, str) -> (Tensor, Tensor)")
        emit("aten::addmv : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::floor_divide : (Tensor, Tensor) -> (Tensor)")
        emit("aten::upsample_trilinear3d : (Tensor, int[], bool, float?, float?, float?) -> (Tensor)")
        emit("aten::upsample_trilinear3d.vec : (Tensor, int[]?, bool, float[]?) -> (Tensor)")
        emit("aten::binary_cross_entropy : (Tensor, Tensor, Tensor?, int) -> (Tensor)")
        emit("aten::isfinite : (Tensor) -> (Tensor)")
        emit("aten::scatter_add : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter_add.dimname : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::cat.names : (Tensor[], str) -> (Tensor)")
        emit("aten::stft : (Tensor, int, int?, int?, Tensor?, bool, bool?, bool?) -> (Tensor)")
        emit("aten::angle : (Tensor) -> (Tensor)")
        emit("aten::view.dtype : (Tensor, int) -> (Tensor)")
        emit("aten::binary_cross_entropy_with_logits : (Tensor, Tensor, Tensor?, Tensor?, int) -> (Tensor)")
        emit("aten::bilinear : (Tensor, Tensor, Tensor, Tensor?) -> (Tensor)")
        emit("aten::celu : (Tensor, Scalar) -> (Tensor)")
        emit("aten::view_as_real : (Tensor) -> (Tensor)")
        emit("aten::multilabel_margin_loss : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::reshape_as : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fft_fft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::to.device : (Tensor, Device, int, bool, bool, int?) -> (Tensor)")
        emit("aten::to.dtype_layout : (Tensor, int?, int?, Device?, bool?, bool, bool, int?) -> (Tensor)")
        emit("aten::swapdims : (Tensor, int, int) -> (Tensor)")
        emit("aten::fake_quantize_per_tensor_affine : (Tensor, float, int, int, int) -> (Tensor)")
        emit("aten::fake_quantize_per_tensor_affine.tensor_qparams : (Tensor, Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::imag : (Tensor) -> (Tensor)")
        emit("aten::unique_consecutive : (Tensor, bool, bool, int?) -> (Tensor, Tensor, Tensor)")
        emit("aten::trunc : (Tensor) -> (Tensor)")
        emit("aten::searchsorted.Tensor : (Tensor, Tensor, bool, bool) -> (Tensor)")
        emit("aten::searchsorted.Scalar : (Tensor, Scalar, bool, bool) -> (Tensor)")
        emit("aten::sign : (Tensor) -> (Tensor)")
        emit("aten::hinge_embedding_loss : (Tensor, Tensor, float, int) -> (Tensor)")
        emit("aten::frac : (Tensor) -> (Tensor)")
        emit("aten::log1p : (Tensor) -> (Tensor)")
        emit("aten::baddbmm : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::clamp_max : (Tensor, Scalar) -> (Tensor)")
        emit("aten::clamp_max.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::rename : (Tensor, str[]?) -> (Tensor)")
        emit("aten::log10 : (Tensor) -> (Tensor)")
        emit("aten::new_empty_strided : (Tensor, int[], int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::tensor_split.sections : (Tensor, int, int) -> (Tensor[])")
        emit("aten::tensor_split.indices : (Tensor, int[], int) -> (Tensor[])")
        emit("aten::tensor_split.tensor_indices_or_sections : (Tensor, Tensor, int) -> (Tensor[])")
        emit("aten::tensordot : (Tensor, Tensor, int[], int[]) -> (Tensor)")
        emit("aten::new_empty : (Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::mH : (Tensor) -> (Tensor)")
        emit("aten::expm1 : (Tensor) -> (Tensor)")
        emit("aten::tan : (Tensor) -> (Tensor)")
        emit("aten::digamma : (Tensor) -> (Tensor)")
        emit("aten::real : (Tensor) -> (Tensor)")
        emit("aten::sinh : (Tensor) -> (Tensor)")
        emit("aten::div.Tensor_mode : (Tensor, Tensor, str?) -> (Tensor)")
        emit("aten::div.Scalar_mode : (Tensor, Scalar, str?) -> (Tensor)")
        emit("aten::hsplit.int : (Tensor, int) -> (Tensor[])")
        emit("aten::hsplit.array : (Tensor, int[]) -> (Tensor[])")
        emit("aten::refine_names : (Tensor, str[]) -> (Tensor)")
        emit("aten::chunk : (Tensor, int, int) -> (Tensor[])")
        emit("aten::mv : (Tensor, Tensor) -> (Tensor)")
        emit("aten::softmax.Dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::pow.Tensor_Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::pow.Scalar : (Scalar, Tensor) -> (Tensor)")
        emit("aten::lu_unpack : (Tensor, Tensor, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::upsample_linear1d : (Tensor, int[], bool, float?) -> (Tensor)")
        emit("aten::upsample_linear1d.vec : (Tensor, int[]?, bool, float[]?) -> (Tensor)")
        emit("aten::im2col : (Tensor, int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::fft_ifft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::asin : (Tensor) -> (Tensor)")
        emit("aten::acos : (Tensor) -> (Tensor)")
        emit("aten::pdist : (Tensor, float) -> (Tensor)")
        emit("aten::bartlett_window : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::bartlett_window.periodic : (int, bool, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::clamp_min : (Tensor, Scalar) -> (Tensor)")
        emit("aten::clamp_min.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::atan2 : (Tensor, Tensor) -> (Tensor)")
        emit("aten::view_as : (Tensor, Tensor) -> (Tensor)")
        emit("aten::log_softmax.Dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::linalg_svdvals : (Tensor) -> (Tensor)")
        emit("aten::align_as : (Tensor, Tensor) -> (Tensor)")
        emit("aten::amin : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::transpose.Dimname : (Tensor, str, str) -> (Tensor)")
        emit("aten::fft_rfft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::trace : (Tensor) -> (Tensor)")
        emit("aten::linalg_tensorinv : (Tensor, int) -> (Tensor)")
        emit("aten::linalg_eigvals : (Tensor) -> (Tensor)")
        emit("aten::upsample_bilinear2d : (Tensor, int[], bool, float?, float?) -> (Tensor)")
        emit("aten::upsample_bilinear2d.vec : (Tensor, int[]?, bool, float[]?) -> (Tensor)")
        emit("aten::unsafe_chunk : (Tensor, int, int) -> (Tensor[])")
        emit("aten::linalg_matrix_rank : (Tensor, float, bool) -> (Tensor)")
        emit("aten::linalg_matrix_rank.tol_tensor : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::linalg_matrix_rank.atol_rtol_tensor : (Tensor, Tensor?, Tensor?, bool) -> (Tensor)")
        emit("aten::linalg_matrix_rank.atol_rtol_float : (Tensor, float?, float?, bool) -> (Tensor)")
        emit("aten::linalg_tensorsolve : (Tensor, Tensor, int[]?) -> (Tensor)")
        emit("aten::addbmm : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::fft_fftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::fft_ihfft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::unfold : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::diagonal : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::diagonal.Dimname : (Tensor, str, str, str, int) -> (Tensor)")
        emit("aten::nuclear_norm : (Tensor, bool) -> (Tensor)")
        emit("aten::nuclear_norm.dim : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::dot : (Tensor, Tensor) -> (Tensor)")
        emit("aten::quantize_per_tensor : (Tensor, float, int, int) -> (Tensor)")
        emit("aten::quantize_per_tensor.tensor_qparams : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::quantize_per_tensor.tensors : (Tensor[], Tensor, Tensor, int) -> (Tensor[])")
        emit("aten::linalg_cond : (Tensor, Scalar?) -> (Tensor)")
        emit("aten::linalg_cond.p_str : (Tensor, str) -> (Tensor)")
        emit("aten::lstm_cell : (Tensor, Tensor[], Tensor, Tensor, Tensor?, Tensor?) -> (Tensor, Tensor)")
        emit("aten::repeat_interleave.Tensor : (Tensor, int?) -> (Tensor)")
        emit("aten::repeat_interleave.self_Tensor : (Tensor, Tensor, int?, int?) -> (Tensor)")
        emit("aten::repeat_interleave.self_int : (Tensor, int, int?, int?) -> (Tensor)")
        emit("aten::kl_div : (Tensor, Tensor, int, bool) -> (Tensor)")
        emit("aten::square : (Tensor) -> (Tensor)")
        emit("aten::l1_loss : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::std : (Tensor, bool) -> (Tensor)")
        emit("aten::std.dim : (Tensor, int[], bool, bool) -> (Tensor)")
        emit("aten::std.names_dim : (Tensor, str[], bool, bool) -> (Tensor)")
        emit("aten::std.correction : (Tensor, int[]?, int?, bool) -> (Tensor)")
        emit("aten::std.correction_names : (Tensor, str[], int?, bool) -> (Tensor)")
        emit("aten::expand_as : (Tensor, Tensor) -> (Tensor)")
        emit("aten::multi_margin_loss : (Tensor, Tensor, Scalar, Scalar, Tensor?, int) -> (Tensor)")
        emit("aten::randint : (int, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::randint.low : (int, int, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::diagflat : (Tensor, int) -> (Tensor)")
        emit("aten::any.dimname : (Tensor, str, bool) -> (Tensor)")
        emit("aten::fft_rfft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::tril : (Tensor, int) -> (Tensor)")
        emit("aten::randint_like : (Tensor, int, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::randint_like.low_dtype : (Tensor, int, int, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::glu : (Tensor, int) -> (Tensor)")
        emit("aten::clamp.Tensor : (Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::randperm : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::squeeze.dimname : (Tensor, str) -> (Tensor)")
        emit("aten::fft_irfftn : (Tensor, int[]?, int[]?, str?) -> (Tensor)")
        emit("aten::movedim.intlist : (Tensor, int[], int[]) -> (Tensor)")
        emit("aten::movedim.int : (Tensor, int, int) -> (Tensor)")
        emit("aten::rsub.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::sum.dim_DimnameList : (Tensor, str[], bool, int?) -> (Tensor)")
        emit("aten::margin_ranking_loss : (Tensor, Tensor, Tensor, float, int) -> (Tensor)")
        emit("aten::unsafe_split_with_sizes : (Tensor, int[], int) -> (Tensor[])")
        emit("aten::linalg_cholesky : (Tensor, bool) -> (Tensor)")
        emit("aten::select.Dimname : (Tensor, str, int) -> (Tensor)")
        emit("aten::svd : (Tensor, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::fft_hfft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::unbind.int : (Tensor, int) -> (Tensor[])")
        emit("aten::unbind.Dimname : (Tensor, str) -> (Tensor[])")
        emit("aten::matrix_H : (Tensor) -> (Tensor)")
        emit("aten::mT : (Tensor) -> (Tensor)")
        emit("aten::round : (Tensor) -> (Tensor)")
        emit("aten::narrow : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::narrow.Tensor : (Tensor, int, Tensor, int) -> (Tensor)")
        emit("aten::lgamma : (Tensor) -> (Tensor)")
        emit("aten::linalg_eigvalsh : (Tensor, str) -> (Tensor)")
        emit("aten::view_as_complex : (Tensor) -> (Tensor)")
        emit("aten::split.Tensor : (Tensor, int, int) -> (Tensor[])")
        emit("aten::split_with_sizes : (Tensor, int[], int) -> (Tensor[])")
        emit("aten::log_sigmoid : (Tensor) -> (Tensor)")
        emit("aten::swapaxes : (Tensor, int, int) -> (Tensor)")
        emit("aten::new_zeros : (Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::linalg_eig : (Tensor) -> (Tensor, Tensor)")
        emit("aten::logaddexp2 : (Tensor, Tensor) -> (Tensor)")
        emit("aten::vsplit.int : (Tensor, int) -> (Tensor[])")
        emit("aten::vsplit.array : (Tensor, int[]) -> (Tensor[])")
        emit("aten::mse_loss : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::instance_norm : (Tensor, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, float, bool) -> (Tensor)")
        emit("aten::ge.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::le.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::le.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::isinf : (Tensor) -> (Tensor)")
        emit("aten::vdot : (Tensor, Tensor) -> (Tensor)")
        emit("aten::col2im : (Tensor, int[], int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::fft_irfft2 : (Tensor, int[]?, int[], str?) -> (Tensor)")
        emit("aten::triplet_margin_loss : (Tensor, Tensor, Tensor, float, float, float, bool, int) -> (Tensor)")
        emit("aten::unflatten.int : (Tensor, int, int[], str[]?) -> (Tensor)")
        emit("aten::unflatten.Dimname : (Tensor, str, int[], str[]) -> (Tensor)")
        emit("aten::dsplit.int : (Tensor, int) -> (Tensor[])")
        emit("aten::dsplit.array : (Tensor, int[]) -> (Tensor[])")
        emit("aten::cdist : (Tensor, Tensor, float, int?) -> (Tensor)")
        emit("aten::empty.names : (int[], str[]?, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::empty_strided : (int[], int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::atan : (Tensor) -> (Tensor)")
        emit("aten::full_like : (Tensor, Scalar, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::rand_like : (Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::randn_like : (Tensor, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::rand : (int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::rand.names : (int[], str[]?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::randn : (int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::randn.names : (int[], str[]?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::erfinv : (Tensor) -> (Tensor)")
        emit("aten::copysign.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::copysign.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::prelu : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fft_fft : (Tensor, int?, int, str?) -> (Tensor)")
        emit("aten::renorm : (Tensor, Scalar, int, Scalar) -> (Tensor)")
        emit("aten::slice_scatter : (Tensor, Tensor, int, int?, int?, int) -> (Tensor)")
        emit("aten::chain_matmul : (Tensor[]) -> (Tensor)")
        emit("aten::symeig : (Tensor, bool, bool) -> (Tensor, Tensor)")
        emit("aten::numpy_T : (Tensor) -> (Tensor)")
        emit("aten::softplus : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::linalg_multi_dot : (Tensor[]) -> (Tensor)")
        emit("aten::gru_cell : (Tensor, Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::rnn_tanh_cell : (Tensor, Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::group_norm : (Tensor, int, Tensor?, Tensor?, float, bool) -> (Tensor)")
        emit("aten::rnn_relu_cell : (Tensor, Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::i0 : (Tensor) -> (Tensor)")
        emit("aten::frobenius_norm : (Tensor) -> (Tensor)")
        emit("aten::frobenius_norm.dim : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::poisson_nll_loss : (Tensor, Tensor, bool, bool, float, int) -> (Tensor)")
        emit("aten::cosine_embedding_loss : (Tensor, Tensor, Tensor, float, int) -> (Tensor)")
        emit("aten::nll_loss : (Tensor, Tensor, Tensor?, int, int) -> (Tensor)")
        emit("aten::hardswish : (Tensor) -> (Tensor)")
        emit("aten::nll_loss2d : (Tensor, Tensor, Tensor?, int, int) -> (Tensor)")
        emit("aten::smooth_l1_loss : (Tensor, Tensor, int, float) -> (Tensor)")
        emit("aten::huber_loss : (Tensor, Tensor, int, float) -> (Tensor)")
        emit("aten::soft_margin_loss : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::dist : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::prod : (Tensor, int?) -> (Tensor)")
        emit("aten::prod.dim_int : (Tensor, int, bool, int?) -> (Tensor)")
        emit("aten::prod.dim_Dimname : (Tensor, str, bool, int?) -> (Tensor)")
        emit("aten::count_nonzero.dim_IntList : (Tensor, int[]) -> (Tensor)")
        emit("aten::count_nonzero : (Tensor, int?) -> (Tensor)")
        emit("aten::cumprod : (Tensor, int, int?) -> (Tensor)")
        emit("aten::cumprod.dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::cross : (Tensor, Tensor, int?) -> (Tensor)")
        emit("aten::cumsum.dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::norm.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::norm.ScalarOpt_dim : (Tensor, Scalar?, int[], bool) -> (Tensor)")
        emit("aten::norm.names_ScalarOpt_dim : (Tensor, Scalar?, str[], bool) -> (Tensor)")
        emit("aten::norm.ScalarOpt_dim_dtype : (Tensor, Scalar?, int[], bool, int) -> (Tensor)")
        emit("aten::norm.ScalarOpt_dtype : (Tensor, Scalar?, int) -> (Tensor)")
        emit("aten::norm.names_ScalarOpt_dim_dtype : (Tensor, Scalar?, str[], bool, int) -> (Tensor)")
        emit("aten::grid_sampler : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::frexp.Tensor : (Tensor) -> (Tensor, Tensor)")
        emit("aten::special_entr : (Tensor) -> (Tensor)")
        emit("aten::eye : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::eye.m : (int, int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::feature_dropout : (Tensor, float, bool) -> (Tensor)")
        emit("aten::flip : (Tensor, int[]) -> (Tensor)")
        emit("aten::fmax : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fmin : (Tensor, Tensor) -> (Tensor)")
        emit("aten::full.names : (int[], Scalar, str[]?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::full : (int[], Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::gather.dimname : (Tensor, str, Tensor, bool) -> (Tensor)")
        emit("aten::gcd : (Tensor, Tensor) -> (Tensor)")
        emit("aten::grid_sampler_2d : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::grid_sampler_3d : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::hamming_window : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hamming_window.periodic : (int, bool, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hamming_window.periodic_alpha : (int, bool, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hamming_window.periodic_alpha_beta : (int, bool, float, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hann_window : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hann_window.periodic : (int, bool, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::hardtanh : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::heaviside : (Tensor, Tensor) -> (Tensor)")
        emit("aten::histogram.bins_tensor : (Tensor, Tensor, Tensor?, bool) -> (Tensor, Tensor)")
        emit("aten::histogram.bin_ct : (Tensor, int, float[]?, Tensor?, bool) -> (Tensor, Tensor)")
        emit("aten::index_select.dimname : (Tensor, str, Tensor) -> (Tensor)")
        emit("aten::from_file : (str, bool?, int?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::kaiser_window : (int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::kaiser_window.periodic : (int, bool, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::kaiser_window.beta : (int, bool, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::linspace : (Scalar, Scalar, int?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::logspace : (Scalar, Scalar, int?, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::ones.names : (int[], str[]?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::scalar_tensor : (Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::range.step : (Scalar, Scalar, Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::range : (Scalar, Scalar, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::zeros.names : (int[], str[]?, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::sparse_csr_tensor.crow_col_value_size : (Tensor, Tensor, Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::sparse_csr_tensor.crow_col_value : (Tensor, Tensor, Tensor, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::sparse_coo_tensor.size : (int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::sparse_coo_tensor.indices : (Tensor, Tensor, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::sparse_coo_tensor.indices_size : (Tensor, Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::tril_indices : (int, int, int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::triu_indices : (int, int, int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::fft_fftfreq : (int, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::fft_rfftfreq : (int, float, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::isposinf : (Tensor) -> (Tensor)")
        emit("aten::isneginf : (Tensor) -> (Tensor)")
        emit("aten::sgn : (Tensor) -> (Tensor)")
        emit("aten::lcm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::exp2 : (Tensor) -> (Tensor)")
        emit("aten::lerp.Scalar : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::isin.Tensor_Tensor : (Tensor, Tensor, bool, bool) -> (Tensor)")
        emit("aten::isin.Tensor_Scalar : (Tensor, Scalar, bool, bool) -> (Tensor)")
        emit("aten::isin.Scalar_Tensor : (Scalar, Tensor, bool, bool) -> (Tensor)")
        emit("aten::nan_to_num : (Tensor, float?, float?, float?) -> (Tensor)")
        emit("aten::xlogy.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::xlogy.Scalar_Self : (Scalar, Tensor) -> (Tensor)")
        emit("aten::xlogy.Scalar_Other : (Tensor, Scalar) -> (Tensor)")
        emit("aten::log_sigmoid_forward : (Tensor) -> (Tensor, Tensor)")
        emit("aten::mvlgamma : (Tensor, int) -> (Tensor)")
        emit("aten::narrow_copy : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::logdet : (Tensor) -> (Tensor)")
        emit("aten::channel_shuffle : (Tensor, int) -> (Tensor)")
        emit("aten::bucketize.Scalar : (Scalar, Tensor, bool, bool) -> (Tensor)")
        emit("aten::silu : (Tensor) -> (Tensor)")
        emit("aten::mish : (Tensor) -> (Tensor)")
        emit("aten::logit : (Tensor, float?) -> (Tensor)")
        emit("aten::sinc : (Tensor) -> (Tensor)")
        emit("aten::sspaddmm : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::nansum : (Tensor, int?) -> (Tensor)")
        emit("aten::nansum.dim_IntList : (Tensor, int[], bool, int?) -> (Tensor)")
        emit("aten::roll : (Tensor, int[], int[]) -> (Tensor)")
        emit("aten::to_sparse.sparse_dim : (Tensor, int) -> (Tensor)")
        emit("aten::to_sparse : (Tensor) -> (Tensor)")
        emit("aten::dequantize.self : (Tensor) -> (Tensor)")
        emit("aten::dequantize.tensors : (Tensor[]) -> (Tensor[])")
        emit("aten::scatter.src : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter.value : (Tensor, int, Tensor, Scalar) -> (Tensor)")
        emit("aten::scatter.reduce : (Tensor, int, Tensor, Tensor, str) -> (Tensor)")
        emit("aten::scatter.value_reduce : (Tensor, int, Tensor, Scalar, str) -> (Tensor)")
        emit("aten::scatter.dimname_src : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter.dimname_value : (Tensor, str, Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_and.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_or.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_or.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_xor.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_xor.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_left_shift.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_left_shift.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_left_shift.Scalar_Tensor : (Scalar, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_right_shift.Scalar_Tensor : (Scalar, Tensor) -> (Tensor)")
        emit("aten::take : (Tensor, Tensor) -> (Tensor)")
        emit("aten::nonzero : (Tensor) -> (Tensor)")
        emit("aten::remainder.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::remainder.Scalar_Tensor : (Scalar, Tensor) -> (Tensor)")
        emit("aten::remainder.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::sort : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::sort.stable : (Tensor, bool?, int, bool) -> (Tensor, Tensor)")
        emit("aten::sort.dimname : (Tensor, str, bool) -> (Tensor, Tensor)")
        emit("aten::sort.dimname_stable : (Tensor, bool?, str, bool) -> (Tensor, Tensor)")
        emit("aten::special_ndtri : (Tensor) -> (Tensor)")
        emit("aten::nll_loss2d_forward : (Tensor, Tensor, Tensor?, int, int) -> (Tensor, Tensor)")
        emit("aten::reflection_pad3d : (Tensor, int[]) -> (Tensor)")
        emit("aten::linalg_pinv.atol_rtol_tensor : (Tensor, Tensor?, Tensor?, bool) -> (Tensor)")
        emit("aten::linalg_pinv.atol_rtol_float : (Tensor, float?, float?, bool) -> (Tensor)")
        emit("aten::linalg_pinv : (Tensor, float, bool) -> (Tensor)")
        emit("aten::linalg_pinv.rcond_tensor : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::upsample_bicubic2d : (Tensor, int[], bool, float?, float?) -> (Tensor)")
        emit("aten::upsample_bicubic2d.vec : (Tensor, int[]?, bool, float[]?) -> (Tensor)")
        emit("aten::special_erfcx : (Tensor) -> (Tensor)")
        emit("aten::special_xlog1py : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlog1py.self_scalar : (Scalar, Tensor) -> (Tensor)")
        emit("aten::special_xlog1py.other_scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::special_zeta : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_zeta.self_scalar : (Scalar, Tensor) -> (Tensor)")
        emit("aten::special_zeta.other_scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::special_i0e : (Tensor) -> (Tensor)")
        emit("aten::special_i1 : (Tensor) -> (Tensor)")
        emit("aten::special_i1e : (Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_exp : (Tensor) -> (Tensor)")
        emit("aten::linalg_slogdet : (Tensor) -> (Tensor, Tensor)")
        emit("aten::linalg_vector_norm : (Tensor, Scalar, int[]?, bool, int?) -> (Tensor)")
        emit("aten::segment_reduce : (Tensor, str, Tensor?, Tensor?, int, bool, Scalar?) -> (Tensor)")
        emit("aten::select_scatter : (Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::slogdet : (Tensor) -> (Tensor, Tensor)")
        emit("aten::rot90 : (Tensor, int, int[]) -> (Tensor)")

        # remaining ops
        # emit("aten::record_stream : (Tensor, Stream) -> ()")
        emit("aten::conv_depthwise3d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[]) -> (Tensor)")
        emit("aten::_torch_cuda_cu_linker_symbol_op : (Tensor) -> (Tensor)")
        emit("aten::_thnn_fused_gru_cell_backward : (Tensor, Tensor, bool) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::_thnn_fused_lstm_cell_backward : (Tensor?, Tensor?, Tensor, Tensor, Tensor, bool) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::_coalesce : (Tensor) -> (Tensor)")
        emit("aten::_nnz : (Tensor) -> (int)")
        emit("aten::_dimV : (Tensor) -> (int)")
        emit("aten::dense_dim : (Tensor) -> (int)")
        emit("aten::_dimI : (Tensor) -> (int)")
        emit("aten::sparse_dim : (Tensor) -> (int)")
        emit("aten::_sparse_log_softmax_backward_data : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_sparse_softmax_backward_data : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_sparse_sum_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::native_norm : (Tensor, Scalar) -> (Tensor)")
        emit("aten::native_norm.ScalarOpt_dim_dtype : (Tensor, Scalar?, int[], bool, int?) -> (Tensor)")
        emit("aten::_weight_norm_cuda_interface_backward : (Tensor, Tensor, Tensor, Tensor, int) -> (Tensor, Tensor)")
        emit("aten::_weight_norm_cuda_interface : (Tensor, Tensor, int) -> (Tensor, Tensor)")
        emit("aten::batch_norm_backward_elemt : (Tensor, Tensor, Tensor, Tensor, Tensor?, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::batch_norm_backward_reduce : (Tensor, Tensor, Tensor, Tensor, Tensor?, bool, bool, bool) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::batch_norm_gather_stats_with_counts : (Tensor, Tensor, Tensor, Tensor?, Tensor?, float, float, Tensor) -> (Tensor, Tensor)")
        emit("aten::batch_norm_gather_stats : (Tensor, Tensor, Tensor, Tensor?, Tensor?, float, float, int) -> (Tensor, Tensor)")
        emit("aten::batch_norm_stats : (Tensor, float) -> (Tensor, Tensor)")
        emit("aten::_sparse_mask_helper : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_sparse_sparse_matmul : (Tensor, Tensor) -> (Tensor)")
        emit("aten::miopen_rnn_backward : (Tensor, Tensor[], int, Tensor, Tensor, Tensor?, Tensor, Tensor?, Tensor?, Tensor?, int, int, int, bool, float, bool, bool, int[], Tensor?, Tensor, bool[]) -> (Tensor, Tensor, Tensor, Tensor[])")
        emit("aten::miopen_rnn : (Tensor, Tensor[], int, Tensor, Tensor?, int, int, int, bool, float, bool, bool, int[], Tensor?) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::miopen_depthwise_convolution_backward_weight : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_depthwise_convolution_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int, bool, bool, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::miopen_depthwise_convolution_backward_input : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_depthwise_convolution : (Tensor, Tensor, Tensor?, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution_transpose_backward_weight : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution_transpose_backward_input : (Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution_transpose_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int, bool, bool, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::miopen_convolution_transpose : (Tensor, Tensor, Tensor?, int[], int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution_backward_weight : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution_backward_bias : (Tensor) -> (Tensor)")
        emit("aten::miopen_convolution_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int, bool, bool, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::miopen_convolution_backward_input : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_convolution : (Tensor, Tensor, Tensor?, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::miopen_batch_norm_backward : (Tensor, Tensor, Tensor, Tensor?, Tensor?, Tensor?, Tensor?, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::miopen_batch_norm : (Tensor, Tensor, Tensor?, Tensor?, Tensor?, bool, float, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::cudnn_grid_sampler_backward : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::cudnn_grid_sampler : (Tensor, Tensor) -> (Tensor)")
        emit("aten::cudnn_convolution_add_relu : (Tensor, Tensor, Tensor, Scalar?, Tensor?, int[], int[], int[], int) -> (Tensor)")
        emit("aten::cudnn_convolution_relu : (Tensor, Tensor, Tensor?, int[], int[], int[], int) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose_backward_weight : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose_backward_input : (Tensor, Tensor, int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int, bool, bool, bool, bool[]) -> (Tensor, Tensor)")
        emit("aten::cudnn_convolution_backward_weight : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int, bool, bool, bool, bool[]) -> (Tensor, Tensor)")
        emit("aten::cudnn_convolution_backward_input : (int[], Tensor, Tensor, int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::cudnn_batch_norm_backward : (Tensor, Tensor, Tensor, Tensor?, Tensor?, Tensor?, Tensor?, float, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::cudnn_batch_norm : (Tensor, Tensor, Tensor?, Tensor?, Tensor?, bool, float, float) -> (Tensor, Tensor, Tensor, Tensor)")
        # emit("aten::cudnn_affine_grid_generator_backward : (Tensor, int, int, int, int) -> (Tensor)")
        # emit("aten::cudnn_affine_grid_generator : (Tensor, int, int, int, int) -> (Tensor)")
        emit("aten::_copy_from_and_resize : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_copy_from : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::_masked_scale : (Tensor, Tensor, float) -> (Tensor)")
        emit("aten::_cudnn_rnn_backward : (Tensor, Tensor[], int, Tensor, Tensor, Tensor?, Tensor, Tensor?, Tensor?, Tensor?, int, int, int, int, bool, float, bool, bool, int[], Tensor?, Tensor, bool[]) -> (Tensor, Tensor, Tensor, Tensor[])")
        emit("aten::_cudnn_rnn : (Tensor, Tensor[], int, Tensor?, Tensor, Tensor?, int, int, int, int, bool, float, bool, bool, int[], Tensor?) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::_cudnn_rnn_flatten_weight : (Tensor[], int, int, int, int, int, int, bool, bool) -> (Tensor)")
        emit("aten::_cudnn_ctc_loss : (Tensor, Tensor, int[], int[], int, bool, bool) -> (Tensor, Tensor)")
        emit("aten::_use_cudnn_ctc_loss : (Tensor, Tensor, int[], int[], int) -> (bool)")
        # emit("aten::qscheme : (Tensor) -> (QScheme)")
        emit("aten::q_per_channel_axis : (Tensor) -> (int)")
        emit("aten::q_zero_point : (Tensor) -> (int)")
        emit("aten::q_scale : (Tensor) -> (float)")
        emit("aten::quantized_max_pool2d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::quantized_max_pool1d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::quantized_batch_norm : (Tensor, Tensor?, Tensor?, Tensor, Tensor, float, float, int) -> (Tensor)")
        emit("aten::mkldnn_adaptive_avg_pool2d_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::mkldnn_adaptive_avg_pool2d : (Tensor, int[]) -> (Tensor)")
        emit("aten::mkldnn_reorder_conv3d_weight : (Tensor, int[], int[], int[], int) -> (Tensor)")
        emit("aten::mkldnn_reorder_conv2d_weight : (Tensor, int[], int[], int[], int) -> (Tensor)")
        emit("aten::_mkldnn_transpose : (Tensor, int, int) -> (Tensor)")
        emit("aten::_mkldnn_reshape : (Tensor, int[]) -> (Tensor)")
        emit("aten::mkldnn_max_pool3d_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::mkldnn_max_pool3d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::mkldnn_max_pool2d_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::mkldnn_max_pool2d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::mkldnn_linear_backward : (Tensor, Tensor, Tensor, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::mkldnn_linear_backward_weights : (Tensor, Tensor, Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::mkldnn_linear_backward_input : (int[], Tensor, Tensor) -> (Tensor)")
        emit("aten::mkldnn_linear : (Tensor, Tensor, Tensor?) -> (Tensor)")
        emit("aten::conv_depthwise3d_backward.grad_input : (Tensor, Tensor, Tensor, int[], int[], int[], int[], Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::conv_depthwise3d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_conv_depthwise2d_backward.grad_input : (Tensor, Tensor, Tensor, int[], int[], int[], int[], Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_conv_depthwise2d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool[]) -> (Tensor, Tensor)")
        emit("aten::_amp_foreach_non_finite_check_and_unscale_ : (Tensor[], Tensor, Tensor) -> ()")
        emit("aten::copy_sparse_to_sparse_ : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::_values : (Tensor) -> (Tensor)")
        emit("aten::sparse_resize_and_clear_ : (Tensor, int[], int, int) -> (Tensor)")
        emit("aten::hspmm.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_indices : (Tensor) -> (Tensor)")
        emit("aten::resize_as_sparse_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_amp_update_scale_ : (Tensor, Tensor, Tensor, float, float, int) -> (Tensor)")
        emit("aten::_coalesced_ : (Tensor, bool) -> (Tensor)")
        emit("aten::_mkldnn_transpose_ : (Tensor, int, int) -> (Tensor)")
        emit("aten::batch_norm_elemt.out : (Tensor, Tensor?, Tensor?, Tensor, Tensor, float, Tensor) -> (Tensor)")
        emit("aten::batch_norm_elemt : (Tensor, Tensor?, Tensor?, Tensor, Tensor, float) -> (Tensor)")
        emit("aten::_conv_depthwise2d.out : (Tensor, Tensor, int[], Tensor?, int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::_conv_depthwise2d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[]) -> (Tensor)")
        emit("aten::sparse_resize_ : (Tensor, int[], int, int) -> (Tensor)")
        emit("aten::_test_ambiguous_defaults.a : (Tensor, int, int) -> (Tensor)")
        emit("aten::_test_ambiguous_defaults.b : (Tensor, int, str) -> (Tensor)")
        emit("aten::_test_string_default : (Tensor, str, str) -> (Tensor)")
        emit("aten::_test_serialization_subcmul : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::linalg_matrix_power.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::linalg_norm.out : (Tensor, Scalar?, int[]?, bool, int?, Tensor) -> (Tensor)")
        emit("aten::linalg_norm.ord_str_out : (Tensor, str, int[]?, bool, int?, Tensor) -> (Tensor)")
        emit("aten::ger.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::outer.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::inner.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_matmul.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_det.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fft_ihfftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::fft_hfftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::fft_ihfft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::fft_hfft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::special_multigammaln.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::special_gammaincc.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_gammainc.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_log1p.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_round.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_sinc.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_expit.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_logsumexp.out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::special_polygamma.out : (int, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_logit.out : (Tensor, float?, Tensor) -> (Tensor)")
        emit("aten::special_i0.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlogy.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlogy.self_scalar_out : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlogy.other_scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::special_ndtr.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_erfinv.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_erfc.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_erf.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_gammaln.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_digamma.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_psi.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_exp2.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_expm1.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::column_stack.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::slow_conv3d : (Tensor, Tensor, int[], Tensor?, int[], int[]) -> (Tensor)")
        emit("aten::slow_conv3d.out : (Tensor, Tensor, int[], Tensor?, int[], int[], Tensor) -> (Tensor)")
        emit("aten::thnn_conv2d : (Tensor, Tensor, int[], Tensor?, int[], int[]) -> (Tensor)")
        emit("aten::thnn_conv2d.out : (Tensor, Tensor, int[], Tensor?, int[], int[], Tensor) -> (Tensor)")
        emit("aten::float_power_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::float_power_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::float_power.Tensor_Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::float_power.Scalar_out : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::float_power.Tensor_Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::msort.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::swapdims_ : (Tensor, int, int) -> (Tensor)")
        emit("aten::swapaxes_ : (Tensor, int, int) -> (Tensor)")
        emit("aten::_gather_sparse_backward : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::gather_backward : (Tensor, Tensor, int, Tensor, bool) -> (Tensor)")
        emit("aten::masked_select_backward : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_select_backward : (Tensor, int[], int, Tensor) -> (Tensor)")
        emit("aten::take_along_dim.out : (Tensor, Tensor, int?, Tensor) -> (Tensor)")
        emit("aten::less_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::less_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::less.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::less.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::greater_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::greater_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::greater.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::greater.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::less_equal_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::less_equal_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::less_equal.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::less_equal.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::greater_equal_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::greater_equal_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::greater_equal.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::greater_equal.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::not_equal_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::not_equal_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::not_equal.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::not_equal.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::diag_backward : (Tensor, int[], int) -> (Tensor)")
        emit("aten::__ixor__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__ixor__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__xor__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__xor__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__ior__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__ior__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__or__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__or__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__iand__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__iand__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__and__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::_pad_packed_sequence : (Tensor, Tensor, bool, Scalar, int) -> (Tensor, Tensor)")
        emit("aten::_pack_padded_sequence_backward : (Tensor, int[], Tensor, bool) -> (Tensor)")
        emit("aten::_thnn_differentiable_gru_cell_backward : (Tensor, Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::_thnn_differentiable_lstm_cell_backward : (Tensor?, Tensor?, Tensor, Tensor, Tensor?, Tensor?, Tensor, Tensor) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
        emit("aten::promote_types : (int, int) -> (int)")
        emit("aten::can_cast : (int, int) -> (bool)")
        emit("aten::_autocast_to_full_precision : (Tensor, bool, bool) -> (Tensor)")
        emit("aten::_autocast_to_reduced_precision : (Tensor, bool, bool, int, int) -> (Tensor)")
        emit("aten::_saturate_weight_to_fp16 : (Tensor) -> (Tensor)")
        emit("aten::_choose_qparams_per_tensor : (Tensor, bool) -> (float, int)")
        emit("aten::fused_moving_avg_obs_fake_quant : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, float, int, int, int, bool, bool) -> (Tensor)")
        emit("aten::_fake_quantize_learnable_per_channel_affine_backward : (Tensor, Tensor, Tensor, Tensor, int, int, int, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::fake_quantize_per_channel_affine_cachemask_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_fake_quantize_learnable_per_tensor_affine_backward : (Tensor, Tensor, Tensor, Tensor, int, int, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::fake_quantize_per_tensor_affine_cachemask_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::to_mkldnn_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::to_dense_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_to_cpu : (Tensor[]) -> (Tensor[])")
        emit("aten::_validate_sparse_csr_tensor_args : (Tensor, Tensor, Tensor, int[]) -> ()")
        emit("aten::_validate_sparse_coo_tensor_args : (Tensor, Tensor, int[]) -> ()")
        emit("aten::subtract_.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::subtract_.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::subtract.out : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_weight_norm_differentiable_backward : (Tensor, Tensor, Tensor, Tensor, int) -> (Tensor, Tensor)")
        emit("aten::_weight_norm : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::_has_compatible_shallow_copy_type : (Tensor, Tensor) -> (bool)")
        emit("aten::fix_ : (Tensor) -> (Tensor)")
        emit("aten::fix.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::dstack.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::vstack.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::hstack.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::selu_ : (Tensor) -> (Tensor)")
        emit("aten::infinitely_differentiable_gelu_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::relu6_ : (Tensor) -> (Tensor)")
        emit("aten::negative_ : (Tensor) -> (Tensor)")
        emit("aten::negative.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_nnpack_spatial_convolution_backward_weight : (Tensor, int[], Tensor, int[]) -> (Tensor)")
        emit("aten::_nnpack_spatial_convolution_backward_input : (Tensor, Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::_nnpack_spatial_convolution_backward : (Tensor, Tensor, Tensor, int[], bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_nnpack_available : () -> (bool)")
        emit("aten::is_vulkan_available : () -> (bool)")
        emit("aten::multiply_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::multiply_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::multiply.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_sparse_mm : (Tensor, Tensor) -> (Tensor)")
        emit("aten::mkldnn_convolution_backward_weights : (int[], Tensor, Tensor, int[], int[], int[], int, bool) -> (Tensor, Tensor)")
        emit("aten::mkldnn_convolution_backward_input : (int[], Tensor, Tensor, int[], int[], int[], int, bool) -> (Tensor)")
        emit("aten::nanmean.out : (Tensor, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::value_selecting_reduction_backward : (Tensor, int, Tensor, int[], bool) -> (Tensor)")
        emit("aten::matrix_exp_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::matrix_power.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::ldexp_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::ldexp.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::kron.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::is_neg : (Tensor) -> (bool)")
        emit("aten::is_conj : (Tensor) -> (bool)")
        emit("aten::is_distributed : (Tensor) -> (bool)")
        emit("aten::_cufft_clear_plan_cache : (int) -> ()")
        emit("aten::_cufft_set_plan_cache_max_size : (int, int) -> ()")
        emit("aten::_cufft_get_plan_cache_max_size : (int) -> (int)")
        emit("aten::_cufft_get_plan_cache_size : (int) -> (int)")
        emit("aten::_grid_sampler_2d_cpu_fallback_backward : (Tensor, Tensor, Tensor, int, int, bool) -> (Tensor, Tensor)")
        emit("aten::_embedding_bag_sparse_backward : (Tensor, Tensor, Tensor, Tensor, Tensor, int, bool, int, Tensor?, int) -> (Tensor)")
        emit("aten::_embedding_bag_backward : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, int, bool, int, bool, Tensor?, int) -> (Tensor)")
        emit("aten::row_stack.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::_rowwise_prune : (Tensor, Tensor, int) -> (Tensor, Tensor)")
        emit("aten::embedding_sparse_backward : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::embedding_backward : (Tensor, Tensor, int, int, bool, bool) -> (Tensor)")
        emit("aten::divide_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::divide_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::divide_.Tensor_mode : (Tensor, Tensor, str?) -> (Tensor)")
        emit("aten::divide_.Scalar_mode : (Tensor, Scalar, str?) -> (Tensor)")
        emit("aten::divide.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::divide.out_mode : (Tensor, Tensor, str?, Tensor) -> (Tensor)")
        emit("aten::diff.out : (Tensor, int, int, Tensor?, Tensor?, Tensor) -> (Tensor)")
        emit("aten::fill_diagonal_ : (Tensor, Scalar, bool) -> (Tensor)")
        emit("aten::cumprod_backward : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::cummaxmin_backward : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::conv_tbc_backward : (Tensor, Tensor, Tensor, Tensor, int) -> (Tensor, Tensor, Tensor)")
        emit("aten::_convolution_double_backward : (Tensor?, Tensor?, Tensor?, Tensor, Tensor, Tensor, int[], int[], int[], bool, int[], int, bool, bool, bool, bool, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_convolution_mode : (Tensor, Tensor, Tensor?, int[], str, int[], int) -> (Tensor)")
        emit("aten::cudnn_is_acceptable : (Tensor) -> (bool)")
        emit("aten::clip_ : (Tensor, Scalar?, Scalar?) -> (Tensor)")
        emit("aten::clip_.Tensor : (Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::clip.out : (Tensor, Scalar?, Scalar?, Tensor) -> (Tensor)")
        emit("aten::clip.Tensor_out : (Tensor, Tensor?, Tensor?, Tensor) -> (Tensor)")
        emit("aten::concat.out : (Tensor[], int, Tensor) -> (Tensor)")
        emit("aten::concat.names_out : (Tensor[], str, Tensor) -> (Tensor)")
        emit("aten::binary_cross_entropy_with_logits_backward : (Tensor, Tensor, Tensor, Tensor?, Tensor?, int) -> (Tensor)")
        emit("aten::_batch_norm_impl_index_backward : (int, Tensor, Tensor, Tensor?, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, bool[], Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::_batch_norm_impl_index : (Tensor, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, float, bool) -> (Tensor, Tensor, Tensor, Tensor, int)")
        emit("aten::arctan_ : (Tensor) -> (Tensor)")
        emit("aten::arctan.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::arcsin_ : (Tensor) -> (Tensor)")
        emit("aten::arcsin.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::arctanh_ : (Tensor) -> (Tensor)")
        emit("aten::arctanh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::arcsinh_ : (Tensor) -> (Tensor)")
        emit("aten::arcsinh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_dim_arange : (Tensor, int) -> (Tensor)")
        emit("aten::allclose : (Tensor, Tensor, float, float, bool) -> (bool)")
        # emit("aten::affine_grid_generator_backward : (Tensor, int[], bool) -> (Tensor)")
        emit("aten::adaptive_avg_pool1d : (Tensor, int[]) -> (Tensor)")
        emit("aten::arccos_ : (Tensor) -> (Tensor)")
        emit("aten::arccos.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::feature_alpha_dropout_ : (Tensor, float, bool) -> (Tensor)")
        emit("aten::cosh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::cos.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::convolution : (Tensor, Tensor, Tensor?, int[], int[], int[], bool, int[], int) -> (Tensor)")
        emit("aten::conv_transpose1d : (Tensor, Tensor, Tensor?, int[], int[], int[], int, int[]) -> (Tensor)")
        emit("aten::conv3d : (Tensor, Tensor, Tensor?, int[], int[], int[], int) -> (Tensor)")
        emit("aten::conv3d.padding : (Tensor, Tensor, Tensor?, int[], str, int[], int) -> (Tensor)")
        emit("aten::retain_grad : (Tensor) -> ()")
        emit("aten::conv1d : (Tensor, Tensor, Tensor?, int[], int[], int[], int) -> (Tensor)")
        emit("aten::conv1d.padding : (Tensor, Tensor, Tensor?, int[], str, int[], int) -> (Tensor)")
        emit("aten::_version : (Tensor) -> (int)")
        emit("aten::is_leaf : (Tensor) -> (bool)")
        emit("aten::polar.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_backward : (Tensor, Tensor[], Tensor?, bool?, bool) -> ()")
        emit("aten::complex.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::true_divide_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::true_divide_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::true_divide.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::tan_ : (Tensor) -> (Tensor)")
        emit("aten::square_ : (Tensor) -> (Tensor)")
        emit("aten::conj_physical_ : (Tensor) -> (Tensor)")
        emit("aten::sinh_ : (Tensor) -> (Tensor)")
        emit("aten::_conj : (Tensor) -> (Tensor)")
        emit("aten::signbit.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::sign_ : (Tensor) -> (Tensor)")
        emit("aten::round_ : (Tensor) -> (Tensor)")
        emit("aten::resize_as_ : (Tensor, Tensor, int?) -> (Tensor)")
        emit("aten::rad2deg_ : (Tensor) -> (Tensor)")
        emit("aten::cholesky_inverse.out : (Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::rad2deg.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_adaptive_avg_pool2d_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::pow_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::pow_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::cholesky.out : (Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::polygamma.out : (int, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_lgamma_ : (Tensor[]) -> ()")
        emit("aten::nextafter_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::nextafter.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_expm1_ : (Tensor[]) -> ()")
        emit("aten::min.dim_min : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::min.names_dim_min : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::min.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_and_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::nanmedian.dim_values : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::nanmedian.names_dim_values : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::scatter_add_ : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::median.dim_values : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::median.names_dim_values : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::scatter_.src : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter_.value : (Tensor, int, Tensor, Scalar) -> (Tensor)")
        emit("aten::scatter_.reduce : (Tensor, int, Tensor, Tensor, str) -> (Tensor)")
        emit("aten::scatter_.value_reduce : (Tensor, int, Tensor, Scalar, str) -> (Tensor)")
        emit("aten::mean.names_out : (Tensor, str[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::mean.out : (Tensor, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::put_ : (Tensor, Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::max_pool3d_with_indices : (Tensor, int[], int[], int[], int[], bool) -> (Tensor, Tensor)")
        emit("aten::max_pool3d_with_indices.out : (Tensor, int[], int[], int[], int[], bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::max_pool2d_with_indices : (Tensor, int[], int[], int[], int[], bool) -> (Tensor, Tensor)")
        emit("aten::max_pool2d_with_indices.out : (Tensor, int[], int[], int[], int[], bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_unique2 : (Tensor, bool, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::trunc_ : (Tensor) -> (Tensor)")
        emit("aten::max_pool1d_with_indices : (Tensor, int[], int[], int[], int[], bool) -> (Tensor, Tensor)")
        emit("aten::max.dim_max : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::max.names_dim_max : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::max.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::masked_select.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::sinc_ : (Tensor) -> (Tensor)")
        emit("aten::masked_fill_.Tensor : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::mish_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::logsumexp.names_out : (Tensor, str[], bool, Tensor) -> (Tensor)")
        emit("aten::logsumexp.out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::logical_not.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_log : (Tensor[]) -> (Tensor[])")
        emit("aten::logaddexp.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::log1p_ : (Tensor) -> (Tensor)")
        emit("aten::kthvalue.dimname_out : (Tensor, int, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::kthvalue.values : (Tensor, int, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_cummax_helper : (Tensor, Tensor, Tensor, int) -> ()")
        emit("aten::is_signed : (Tensor) -> (bool)")
        emit("aten::is_nonzero : (Tensor) -> (bool)")
        emit("aten::is_inference : (Tensor) -> (bool)")
        emit("aten::is_coalesced : (Tensor) -> (bool)")
        emit("aten::logical_xor.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_log10 : (Tensor[]) -> (Tensor[])")
        emit("aten::igammac_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::logical_or.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_log_ : (Tensor[]) -> ()")
        emit("aten::igammac.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::logical_and.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_floor_ : (Tensor[]) -> ()")
        emit("aten::igamma_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::igamma.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::i0_ : (Tensor) -> (Tensor)")
        emit("aten::hypot.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::frac_ : (Tensor) -> (Tensor)")
        emit("aten::floor_divide_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::floor_divide_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::mode.dimname_out : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::mode.values : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_foreach_sub_.Scalar : (Tensor[], Scalar) -> ()")
        emit("aten::_foreach_sub_.List : (Tensor[], Tensor[], Scalar) -> ()")
        emit("aten::_foreach_sub_.ScalarList : (Tensor[], Scalar[]) -> ()")
        emit("aten::erfc.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::erf.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::equal : (Tensor, Tensor) -> (bool)")
        emit("aten::div_.Tensor_mode : (Tensor, Tensor, str?) -> (Tensor)")
        emit("aten::div_.Scalar_mode : (Tensor, Scalar, str?) -> (Tensor)")
        emit("aten::deg2rad.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::clamp_min_ : (Tensor, Scalar) -> (Tensor)")
        emit("aten::clamp_min_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::clamp_max_ : (Tensor, Scalar) -> (Tensor)")
        emit("aten::clamp_max_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::clamp_.Tensor : (Tensor, Tensor?, Tensor?) -> (Tensor)")
        emit("aten::bitwise_not.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_log1p : (Tensor[]) -> (Tensor[])")
        emit("aten::atanh_ : (Tensor) -> (Tensor)")
        emit("aten::atanh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::atan_ : (Tensor) -> (Tensor)")
        emit("aten::asinh_ : (Tensor) -> (Tensor)")
        emit("aten::asinh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::asin_ : (Tensor) -> (Tensor)")
        emit("aten::arccosh_ : (Tensor) -> (Tensor)")
        emit("aten::var.names_out : (Tensor, str[], bool, bool, Tensor) -> (Tensor)")
        emit("aten::var.out : (Tensor, int[], bool, bool, Tensor) -> (Tensor)")
        emit("aten::var.correction_out : (Tensor, int[]?, int?, bool, Tensor) -> (Tensor)")
        emit("aten::var.correction_names_out : (Tensor, str[], int?, bool, Tensor) -> (Tensor)")
        emit("aten::addmv_ : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::addcdiv_ : (Tensor, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::_add_relu_.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::_add_relu_.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::amax.out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::_add_relu.Tensor : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::_add_relu.out : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_add_relu.Scalar : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::argmin.out : (Tensor, int?, bool, Tensor) -> (Tensor)")
        emit("aten::acosh_ : (Tensor) -> (Tensor)")
        emit("aten::acosh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::acos_ : (Tensor) -> (Tensor)")
        emit("aten::absolute_ : (Tensor) -> (Tensor)")
        emit("aten::absolute.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_local_scalar_dense : (Tensor) -> (Scalar)")
        emit("aten::linalg_inv_ex.inverse : (Tensor, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::linalg_svd.U : (Tensor, bool, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::multilabel_margin_loss_forward.output : (Tensor, Tensor, int, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_foreach_abs : (Tensor[]) -> (Tensor[])")
        emit("aten::fractional_max_pool3d : (Tensor, int[], int[], Tensor) -> (Tensor, Tensor)")
        emit("aten::fractional_max_pool3d.output : (Tensor, int[], int[], Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::addmm.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::fractional_max_pool2d : (Tensor, int[], int[], Tensor) -> (Tensor, Tensor)")
        emit("aten::fractional_max_pool2d.output : (Tensor, int[], int[], Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::solve.solution : (Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::qr.Q : (Tensor, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::hardswish_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_lu_with_info : (Tensor, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::lstsq.X : (Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_reshape_alias : (Tensor, int[], int[]) -> (Tensor)")
        emit("aten::geqrf.a : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::eig.e : (Tensor, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::cummin.dimname_out : (Tensor, str, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::cummin.out : (Tensor, int, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::cummax.dimname_out : (Tensor, str, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::cummax.out : (Tensor, int, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::linalg_householder_product.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_inv.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::add.out : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::linalg_solve.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool2d_backward : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool2d_backward.grad_input : (Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::triangular_solve.X : (Tensor, Tensor, bool, bool, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::fft_irfft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::all.out : (Tensor, int, bool, Tensor) -> (Tensor)")
        emit("aten::all.all_out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::all.dimname_out : (Tensor, str, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_lstsq.out : (Tensor, Tensor, float?, str?, Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::fft_ifftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::fft_ifft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::sqrt_ : (Tensor) -> (Tensor)")
        emit("aten::conj_physical.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::softshrink.out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::hardsigmoid.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_norm.out : (Tensor, Scalar, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_norm.str_ord_out : (Tensor, str, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::hardshrink.out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::elu.out : (Tensor, Scalar, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::replication_pad3d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_debug_has_internal_overlap : (Tensor) -> (int)")
        emit("aten::replication_pad2d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::retains_grad : (Tensor) -> (bool)")
        emit("aten::replication_pad1d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::reflection_pad2d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_test_optional_floatlist : (Tensor, float[]?) -> (Tensor)")
        emit("aten::reflection_pad1d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_linalg_qr_helper : (Tensor, str) -> (Tensor, Tensor)")
        emit("aten::max_unpool3d : (Tensor, Tensor, int[], int[], int[]) -> (Tensor)")
        emit("aten::max_unpool3d.out : (Tensor, Tensor, int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::max_unpool2d : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::max_unpool2d.out : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_foreach_trunc_ : (Tensor[]) -> ()")
        emit("aten::ormqr.out : (Tensor, Tensor, Tensor, bool, bool, Tensor) -> (Tensor)")
        emit("aten::_foreach_frac : (Tensor[]) -> (Tensor[])")
        emit("aten::orgqr.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_stack : (Tensor[], int) -> (Tensor)")
        emit("aten::_stack.out : (Tensor[], int, Tensor) -> (Tensor)")
        emit("aten::lu_solve.out : (Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::silu_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::silu_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::inverse.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::erfinv_ : (Tensor) -> (Tensor)")
        emit("aten::avg_pool3d_backward : (Tensor, Tensor, int[], int[], int[], bool, bool, int?) -> (Tensor)")
        emit("aten::avg_pool3d_backward.grad_input : (Tensor, Tensor, int[], int[], int[], bool, bool, int?, Tensor) -> (Tensor)")
        emit("aten::cholesky_solve.out : (Tensor, Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::erfc_ : (Tensor) -> (Tensor)")
        emit("aten::avg_pool3d : (Tensor, int[], int[], int[], bool, bool, int?) -> (Tensor)")
        emit("aten::avg_pool3d.out : (Tensor, int[], int[], int[], bool, bool, int?, Tensor) -> (Tensor)")
        emit("aten::aminmax.out : (Tensor, int?, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::fft_rfftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::triu.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::logcumsumexp.dimname_out : (Tensor, str, Tensor) -> (Tensor)")
        emit("aten::logcumsumexp.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_compute_linear_combination : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_compute_linear_combination.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::histc.out : (Tensor, int, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::diag.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::nanquantile.scalar_out : (Tensor, float, int?, bool, Tensor) -> (Tensor)")
        emit("aten::nanquantile.out : (Tensor, Tensor, int?, bool, Tensor) -> (Tensor)")
        emit("aten::nanquantile.new_scalar_out : (Tensor, float, int?, bool, str, Tensor) -> (Tensor)")
        emit("aten::nanquantile.new_out : (Tensor, Tensor, int?, bool, str, Tensor) -> (Tensor)")
        emit("aten::_adaptive_avg_pool2d : (Tensor, int[]) -> (Tensor)")
        emit("aten::quantile.scalar_out : (Tensor, float, int?, bool, Tensor) -> (Tensor)")
        emit("aten::quantile.out : (Tensor, Tensor, int?, bool, Tensor) -> (Tensor)")
        emit("aten::quantile.new_scalar_out : (Tensor, float, int?, bool, str, Tensor) -> (Tensor)")
        emit("aten::quantile.new_out : (Tensor, Tensor, int?, bool, str, Tensor) -> (Tensor)")
        emit("aten::arccosh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fmod.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::fmod.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_cdist_forward : (Tensor, Tensor, float, int?) -> (Tensor)")
        emit("aten::upsample_nearest3d.out : (Tensor, int[], float?, float?, float?, Tensor) -> (Tensor)")
        emit("aten::linalg_eigh.eigvals : (Tensor, str, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::upsample_nearest2d.out : (Tensor, int[], float?, float?, Tensor) -> (Tensor)")
        emit("aten::linalg_cholesky_ex.L : (Tensor, bool, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::addr.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::upsample_nearest1d.out : (Tensor, int[], float?, Tensor) -> (Tensor)")
        emit("aten::gelu.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_qr.out : (Tensor, str, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::addmv.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::floor_divide.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_to_copy : (Tensor, int?, int?, Device?, bool?, bool, int?) -> (Tensor)")
        emit("aten::argmax.out : (Tensor, int?, bool, Tensor) -> (Tensor)")
        emit("aten::upsample_trilinear3d.out : (Tensor, int[], bool, float?, float?, float?, Tensor) -> (Tensor)")
        emit("aten::binary_cross_entropy.out : (Tensor, Tensor, Tensor?, int, Tensor) -> (Tensor)")
        emit("aten::scatter_add.out : (Tensor, int, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::cat.names_out : (Tensor[], str, Tensor) -> (Tensor)")
        emit("aten::cat.out : (Tensor[], int, Tensor) -> (Tensor)")
        emit("aten::mm.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_sub.Scalar : (Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_sub.List : (Tensor[], Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_sub.ScalarList : (Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::angle.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::log10_ : (Tensor) -> (Tensor)")
        emit("aten::lgamma_ : (Tensor) -> (Tensor)")
        emit("aten::hypot_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::index_fill_.Dimname_Scalar : (Tensor, str, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_fill_.Dimname_Tensor : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_fill_.int_Scalar : (Tensor, int, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_fill_.int_Tensor : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::digamma_ : (Tensor) -> (Tensor)")
        emit("aten::avg_pool2d_backward : (Tensor, Tensor, int[], int[], int[], bool, bool, int?) -> (Tensor)")
        emit("aten::avg_pool2d_backward.grad_input : (Tensor, Tensor, int[], int[], int[], bool, bool, int?, Tensor) -> (Tensor)")
        emit("aten::polygamma_ : (Tensor, int) -> (Tensor)")
        emit("aten::multilabel_margin_loss.out : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_sqrt : (Tensor[]) -> (Tensor[])")
        emit("aten::_sobol_engine_initialize_state_ : (Tensor, int) -> (Tensor)")
        emit("aten::result_type.Tensor : (Tensor, Tensor) -> (int)")
        emit("aten::result_type.Scalar : (Tensor, Scalar) -> (int)")
        emit("aten::result_type.Scalar_Tensor : (Scalar, Tensor) -> (int)")
        emit("aten::result_type.Scalar_Scalar : (Scalar, Scalar) -> (int)")
        emit("aten::fft_fft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::addcdiv.out : (Tensor, Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::avg_pool2d : (Tensor, int[], int[], int[], bool, bool, int?) -> (Tensor)")
        emit("aten::avg_pool2d.out : (Tensor, int[], int[], int[], bool, bool, int?, Tensor) -> (Tensor)")
        emit("aten::deg2rad_ : (Tensor) -> (Tensor)")
        emit("aten::max_pool1d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::trunc.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::searchsorted.Tensor_out : (Tensor, Tensor, bool, bool, Tensor) -> (Tensor)")
        emit("aten::_unique : (Tensor, bool, bool) -> (Tensor, Tensor)")
        emit("aten::mul.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::sign.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::sigmoid.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::mvlgamma_ : (Tensor, int) -> (Tensor)")
        emit("aten::frac.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::log1p.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::expm1_ : (Tensor) -> (Tensor)")
        emit("aten::baddbmm.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::clamp_max.out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::clamp_max.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::log10.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_fft_c2r : (Tensor, int[], int, int) -> (Tensor)")
        emit("aten::_fft_c2r.out : (Tensor, int[], int, int, Tensor) -> (Tensor)")
        emit("aten::tensordot.out : (Tensor, Tensor, int[], int[], Tensor) -> (Tensor)")
        emit("aten::sigmoid_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::sigmoid_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::floor.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::expm1.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::tan.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::select_backward : (Tensor, int[], int, int) -> (Tensor)")
        emit("aten::digamma.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::cosh_ : (Tensor) -> (Tensor)")
        emit("aten::avg_pool1d : (Tensor, int[], int[], int[], bool, bool) -> (Tensor)")
        emit("aten::sinh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::div.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::div.out_mode : (Tensor, Tensor, str?, Tensor) -> (Tensor)")
        emit("aten::mv.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_acos : (Tensor[]) -> (Tensor[])")
        emit("aten::sin.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_abs_ : (Tensor[]) -> ()")
        emit("aten::pow.Scalar_out : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::pow.Tensor_Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::pow.Tensor_Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_addcmul.Scalar : (Tensor[], Tensor[], Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_addcmul.ScalarList : (Tensor[], Tensor[], Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::slice_backward : (Tensor, int[], int, int, int, int) -> (Tensor)")
        emit("aten::tanh.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::lu_unpack.out : (Tensor, Tensor, bool, bool, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::addcmul.out : (Tensor, Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::upsample_linear1d.out : (Tensor, int[], bool, float?, Tensor) -> (Tensor)")
        emit("aten::im2col.out : (Tensor, int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::fft_ifft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::threshold_backward.grad_input : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::asin.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::acos.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_reciprocal_ : (Tensor[]) -> ()")
        emit("aten::clamp_min.out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::clamp_min.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::rename_ : (Tensor, str[]?) -> (Tensor)")
        emit("aten::atan2_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::atan2.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_svdvals.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool3d : (Tensor, int[]) -> (Tensor, Tensor)")
        emit("aten::adaptive_max_pool3d.out : (Tensor, int[], Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_thnn_fused_gru_cell : (Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor, Tensor)")
        emit("aten::bmm.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::logical_and_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::amin.out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::fft_rfft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::abs.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::addmm_ : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::linalg_tensorinv.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::linalg_eigvals.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool3d_backward : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool3d_backward.grad_input : (Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::upsample_bilinear2d.out : (Tensor, int[], bool, float?, float?, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_rank.atol_rtol_tensor_out : (Tensor, Tensor?, Tensor?, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_rank.atol_rtol_float_out : (Tensor, float?, float?, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_rank.out : (Tensor, float, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_matrix_rank.out_tol_tensor : (Tensor, Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool2d : (Tensor, int[]) -> (Tensor, Tensor)")
        emit("aten::adaptive_max_pool2d.out : (Tensor, int[], Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::linalg_tensorsolve.out : (Tensor, Tensor, int[]?, Tensor) -> (Tensor)")
        emit("aten::addbmm.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::fft_fftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::rsqrt.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fft_ihfft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::nuclear_norm.out : (Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::nuclear_norm.dim_out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::_foreach_round : (Tensor[]) -> (Tensor[])")
        emit("aten::dot.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::max_pool3d : (Tensor, int[], int[], int[], int[], bool) -> (Tensor)")
        emit("aten::neg.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::log2.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_fft_c2c : (Tensor, int[], int, bool) -> (Tensor)")
        emit("aten::_fft_c2c.out : (Tensor, int[], int, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_cond.out : (Tensor, Scalar?, Tensor) -> (Tensor)")
        emit("aten::linalg_cond.p_str_out : (Tensor, str, Tensor) -> (Tensor)")
        emit("aten::adaptive_max_pool1d : (Tensor, int[]) -> (Tensor, Tensor)")
        emit("aten::sub.out : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::stride.int : (Tensor, int) -> (int)")
        emit("aten::stride.Dimname : (Tensor, str) -> (int)")
        emit("aten::sgn_ : (Tensor) -> (Tensor)")
        emit("aten::logical_not_ : (Tensor) -> (Tensor)")
        emit("aten::conv2d.padding : (Tensor, Tensor, Tensor?, int[], str, int[], int) -> (Tensor)")
        emit("aten::_fw_primal : (Tensor, int) -> (Tensor)")
        emit("aten::square.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::l1_loss.out : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_cummin_helper : (Tensor, Tensor, Tensor, int) -> ()")
        emit("aten::std.names_out : (Tensor, str[], bool, bool, Tensor) -> (Tensor)")
        emit("aten::std.out : (Tensor, int[], bool, bool, Tensor) -> (Tensor)")
        emit("aten::std.correction_out : (Tensor, int[]?, int?, bool, Tensor) -> (Tensor)")
        emit("aten::std.correction_names_out : (Tensor, str[], int?, bool, Tensor) -> (Tensor)")
        emit("aten::conv_tbc : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::logical_xor_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::multi_margin_loss.out : (Tensor, Tensor, Scalar, Scalar, Tensor?, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_exp : (Tensor[]) -> (Tensor[])")
        emit("aten::exp.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::randint.out : (int, int[], Tensor) -> (Tensor)")
        emit("aten::randint.low_out : (int, int, int[], Tensor) -> (Tensor)")
        emit("aten::fractional_max_pool3d_backward : (Tensor, Tensor, int[], int[], Tensor) -> (Tensor)")
        emit("aten::fractional_max_pool3d_backward.grad_input : (Tensor, Tensor, int[], int[], Tensor, Tensor) -> (Tensor)")
        emit("aten::any.out : (Tensor, int, bool, Tensor) -> (Tensor)")
        emit("aten::any.all_out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::any.dimname_out : (Tensor, str, bool, Tensor) -> (Tensor)")
        emit("aten::_sparse_log_softmax.Dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::_sparse_log_softmax.int : (Tensor, int, int?) -> (Tensor)")
        emit("aten::_sparse_log_softmax : (Tensor, int, bool) -> (Tensor)")
        emit("aten::fft_rfft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::adaptive_avg_pool2d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::tril.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::upsample_nearest3d_backward.vec : (Tensor, int[]?, int[], float[]?) -> (Tensor)")
        emit("aten::upsample_nearest3d_backward : (Tensor, int[], int[], float?, float?, float?) -> (Tensor)")
        emit("aten::upsample_nearest3d_backward.grad_input : (Tensor, int[], int[], float?, float?, float?, Tensor) -> (Tensor)")
        emit("aten::zero_ : (Tensor) -> (Tensor)")
        emit("aten::stack.out : (Tensor[], int, Tensor) -> (Tensor)")
        emit("aten::logit_backward : (Tensor, Tensor, float?) -> (Tensor)")
        emit("aten::logit_backward.grad_input : (Tensor, Tensor, float?, Tensor) -> (Tensor)")
        emit("aten::glu.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::clamp.out : (Tensor, Scalar?, Scalar?, Tensor) -> (Tensor)")
        emit("aten::clamp.Tensor_out : (Tensor, Tensor?, Tensor?, Tensor) -> (Tensor)")
        emit("aten::randperm.out : (int, Tensor) -> (Tensor)")
        emit("aten::_det_lu_based_helper : (Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::_s_where : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_sigmoid_ : (Tensor[]) -> ()")
        emit("aten::fft_irfftn.out : (Tensor, int[]?, int[]?, str?, Tensor) -> (Tensor)")
        emit("aten::adaptive_avg_pool3d : (Tensor, int[]) -> (Tensor)")
        emit("aten::adaptive_avg_pool3d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::upsample_trilinear3d_backward : (Tensor, int[], int[], bool, float?, float?, float?) -> (Tensor)")
        emit("aten::upsample_trilinear3d_backward.grad_input : (Tensor, int[], int[], bool, float?, float?, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_trilinear3d_backward.vec : (Tensor, int[]?, int[], bool, float[]?) -> (Tensor)")
        emit("aten::_conj_physical : (Tensor) -> (Tensor)")
        emit("aten::_standard_gamma_grad : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_sparse_addmm : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::ceil.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::output_nr : (Tensor) -> (int)")
        emit("aten::is_pinned : (Tensor, Device?) -> (bool)")
        emit("aten::size.Dimname : (Tensor, str) -> (int)")
        emit("aten::sum.DimnameList_out : (Tensor, str[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::sum.IntList_out : (Tensor, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::_add_batch_dim : (Tensor, int, int) -> (Tensor)")
        emit("aten::_sparse_coo_tensor_with_dims : (int, int, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::mish_ : (Tensor) -> (Tensor)")
        emit("aten::linalg_cholesky.out : (Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::svd.U : (Tensor, bool, bool, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::_make_dual : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::_sparse_coo_tensor_unsafe : (Tensor, Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::fft_hfft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::adaptive_avg_pool3d_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::lt.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::lt.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::is_same_size : (Tensor, Tensor) -> (bool)")
        emit("aten::_empty_affine_quantized : (int[], int?, int?, Device?, bool?, float, int, int?) -> (Tensor)")
        emit("aten::sqrt.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fill_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::round.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_asin_ : (Tensor[]) -> ()")
        emit("aten::reciprocal.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_linalg_inv_out_helper_ : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::lgamma.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::detach_ : (Tensor) -> (Tensor)")
        emit("aten::_sobol_engine_scramble_ : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::linalg_eigvalsh.out : (Tensor, str, Tensor) -> (Tensor)")
        emit("aten::embedding_renorm_ : (Tensor, Tensor, float, float) -> (Tensor)")
        emit("aten::erf_ : (Tensor) -> (Tensor)")
        emit("aten::_reshape_from_tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::log_sigmoid.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_inverse_helper : (Tensor) -> (Tensor)")
        # emit("aten::set_.source_Storage_storage_offset : (Tensor, Storage, int, int[], int[]) -> (Tensor)")
        emit("aten::set_.source_Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::set_ : (Tensor) -> (Tensor)")
        # emit("aten::set_.source_Storage : (Tensor, Storage) -> (Tensor)")
        emit("aten::diagonal_backward : (Tensor, int[], int, int, int) -> (Tensor)")
        emit("aten::_sparse_sum.dim : (Tensor, int[]) -> (Tensor)")
        emit("aten::_sparse_sum : (Tensor) -> (Tensor)")
        emit("aten::_sparse_sum.dtype : (Tensor, int) -> (Tensor)")
        emit("aten::_sparse_sum.dim_dtype : (Tensor, int[], int) -> (Tensor)")
        emit("aten::linalg_eig.out : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::logaddexp2.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::mse_loss.out : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_mul.Scalar : (Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_mul.List : (Tensor[], Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_mul.ScalarList : (Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::eq.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::eq.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::is_complex : (Tensor) -> (bool)")
        emit("aten::gt.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::gt.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::ge.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::ge.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::le.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::le.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::ne.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::ne.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::binary_cross_entropy_backward : (Tensor, Tensor, Tensor, Tensor?, int) -> (Tensor)")
        emit("aten::binary_cross_entropy_backward.grad_input : (Tensor, Tensor, Tensor, Tensor?, int, Tensor) -> (Tensor)")
        emit("aten::vdot.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::col2im.out : (Tensor, int[], int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::_unsafe_view : (Tensor, int[]) -> (Tensor)")
        emit("aten::linear.out : (Tensor, Tensor, Tensor?, Tensor) -> (Tensor)")
        emit("aten::native_group_norm : (Tensor, Tensor?, Tensor?, int, int, int, int, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::baddbmm_ : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::as_strided_ : (Tensor, int[], int[], int?) -> (Tensor)")
        emit("aten::squeeze_ : (Tensor) -> (Tensor)")
        emit("aten::squeeze_.dim : (Tensor, int) -> (Tensor)")
        emit("aten::squeeze_.dimname : (Tensor, str) -> (Tensor)")
        emit("aten::fft_irfft2.out : (Tensor, int[]?, int[], str?, Tensor) -> (Tensor)")
        emit("aten::_sparse_softmax.Dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::_sparse_softmax.int : (Tensor, int, int?) -> (Tensor)")
        emit("aten::_sparse_softmax : (Tensor, int, bool) -> (Tensor)")
        emit("aten::arange.start_out : (Scalar, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::arange.out : (Scalar, Tensor) -> (Tensor)")
        emit("aten::transpose_ : (Tensor, int, int) -> (Tensor)")
        emit("aten::t_ : (Tensor) -> (Tensor)")
        emit("aten::log.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_fft_r2c : (Tensor, int[], int, bool) -> (Tensor)")
        emit("aten::_fft_r2c.out : (Tensor, int[], int, bool, Tensor) -> (Tensor)")
        emit("aten::unsqueeze_ : (Tensor, int) -> (Tensor)")
        emit("aten::_foreach_sigmoid : (Tensor[]) -> (Tensor[])")
        emit("aten::trace_backward : (Tensor, int[]) -> (Tensor)")
        emit("aten::alpha_dropout_ : (Tensor, float, bool) -> (Tensor)")
        emit("aten::empty.out : (int[], int?, Tensor) -> (Tensor)")
        emit("aten::atan.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::is_floating_point : (Tensor) -> (bool)")
        emit("aten::requires_grad_ : (Tensor, bool) -> (Tensor)")
        emit("aten::_foreach_sinh_ : (Tensor[]) -> ()")
        emit("aten::_foreach_addcdiv.Scalar : (Tensor[], Tensor[], Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_addcdiv.ScalarList : (Tensor[], Tensor[], Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::_adaptive_avg_pool3d_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::col2im_backward : (Tensor, int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::col2im_backward.grad_input : (Tensor, int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::rand.out : (int[], Tensor) -> (Tensor)")
        emit("aten::_adaptive_avg_pool3d : (Tensor, int[]) -> (Tensor)")
        emit("aten::_convolution.deprecated : (Tensor, Tensor, Tensor?, int[], int[], int[], bool, int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::_convolution : (Tensor, Tensor, Tensor?, int[], int[], int[], bool, int[], int, bool, bool, bool, bool) -> (Tensor)")
        emit("aten::randn.out : (int[], Tensor) -> (Tensor)")
        emit("aten::tanh_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_convolution_nogroup : (Tensor, Tensor, Tensor?, int[], int[], int[], bool, int[]) -> (Tensor)")
        emit("aten::logical_or_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::conv_transpose2d.input : (Tensor, Tensor, Tensor?, int[], int[], int[], int, int[]) -> (Tensor)")
        emit("aten::_thnn_fused_lstm_cell : (Tensor, Tensor, Tensor, Tensor?, Tensor?) -> (Tensor, Tensor, Tensor)")
        emit("aten::erfinv.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::conv_transpose3d.input : (Tensor, Tensor, Tensor?, int[], int[], int[], int, int[]) -> (Tensor)")
        emit("aten::set_data : (Tensor, Tensor) -> ()")
        emit("aten::copysign.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::copysign.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::cudnn_convolution.deprecated : (Tensor, Tensor, Tensor?, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution.deprecated2 : (Tensor, Tensor, int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution : (Tensor, Tensor, int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose.deprecated : (Tensor, Tensor, Tensor?, int[], int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose.deprecated2 : (Tensor, Tensor, int[], int[], int[], int[], int, bool, bool) -> (Tensor)")
        emit("aten::cudnn_convolution_transpose : (Tensor, Tensor, int[], int[], int[], int[], int, bool, bool, bool) -> (Tensor)")
        emit("aten::_foreach_minimum.List : (Tensor[], Tensor[]) -> (Tensor[])")
        emit("aten::threshold.out : (Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::fft_fft.out : (Tensor, int?, int, str?, Tensor) -> (Tensor)")
        emit("aten::matmul.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::renorm.out : (Tensor, Scalar, int, Scalar, Tensor) -> (Tensor)")
        emit("aten::chain_matmul.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::symeig.e : (Tensor, bool, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_sparse_csr_tensor_unsafe : (Tensor, Tensor, Tensor, int[], int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::_remove_batch_dim : (Tensor, int, int, int) -> (Tensor)")
        emit("aten::_sparse_coo_tensor_with_dims_and_tensors : (int, int, int[], Tensor, Tensor, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::softplus.out : (Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::linalg_multi_dot.out : (Tensor[], Tensor) -> (Tensor)")
        emit("aten::i0.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_ceil_ : (Tensor[]) -> ()")
        emit("aten::frobenius_norm.out : (Tensor, int[], bool, Tensor) -> (Tensor)")
        emit("aten::_trilinear : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int) -> (Tensor)")
        emit("aten::dropout_ : (Tensor, float, bool) -> (Tensor)")
        emit("aten::nll_loss.out : (Tensor, Tensor, Tensor?, int, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_neg : (Tensor[]) -> (Tensor[])")
        emit("aten::hardswish.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::nll_loss2d.out : (Tensor, Tensor, Tensor?, int, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_neg_ : (Tensor[]) -> ()")
        emit("aten::smooth_l1_loss.out : (Tensor, Tensor, int, float, Tensor) -> (Tensor)")
        emit("aten::huber_loss.out : (Tensor, Tensor, int, float, Tensor) -> (Tensor)")
        emit("aten::soft_margin_loss.out : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::addcmul_ : (Tensor, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::prod.Dimname_out : (Tensor, str, bool, int?, Tensor) -> (Tensor)")
        emit("aten::prod.int_out : (Tensor, int, bool, int?, Tensor) -> (Tensor)")
        emit("aten::_convert_indices_from_coo_to_csr : (Tensor, int, bool) -> (Tensor)")
        emit("aten::_convert_indices_from_coo_to_csr.out : (Tensor, int, bool, Tensor) -> (Tensor)")
        emit("aten::cumprod.dimname_out : (Tensor, str, int?, Tensor) -> (Tensor)")
        emit("aten::cumprod.out : (Tensor, int, int?, Tensor) -> (Tensor)")
        emit("aten::cross.out : (Tensor, Tensor, int?, Tensor) -> (Tensor)")
        emit("aten::cumsum.dimname_out : (Tensor, str, int?, Tensor) -> (Tensor)")
        emit("aten::cumsum.out : (Tensor, int, int?, Tensor) -> (Tensor)")
        emit("aten::norm.dtype_out : (Tensor, Scalar?, int[], bool, int, Tensor) -> (Tensor)")
        emit("aten::norm.out : (Tensor, Scalar?, int[], bool, Tensor) -> (Tensor)")
        emit("aten::norm.names_dtype_out : (Tensor, Scalar?, str[], bool, int, Tensor) -> (Tensor)")
        emit("aten::norm.names_out : (Tensor, Scalar?, str[], bool, Tensor) -> (Tensor)")
        emit("aten::_foreach_sin_ : (Tensor[]) -> ()")
        emit("aten::frexp.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::elu_backward : (Tensor, Scalar, Scalar, Scalar, bool, Tensor) -> (Tensor)")
        emit("aten::elu_backward.grad_input : (Tensor, Scalar, Scalar, Scalar, bool, Tensor, Tensor) -> (Tensor)")
        emit("aten::embedding_dense_backward : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::special_entr.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::eye.out : (int, Tensor) -> (Tensor)")
        emit("aten::eye.m_out : (int, int, Tensor) -> (Tensor)")
        emit("aten::fmod_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::fmax.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::fmin.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::fractional_max_pool2d_backward : (Tensor, Tensor, int[], int[], Tensor) -> (Tensor)")
        emit("aten::fractional_max_pool2d_backward.grad_input : (Tensor, Tensor, int[], int[], Tensor, Tensor) -> (Tensor)")
        emit("aten::full.out : (int[], Scalar, Tensor) -> (Tensor)")
        emit("aten::gather.out : (Tensor, int, Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::gather.dimname_out : (Tensor, str, Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::gcd.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::gelu_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::glu_backward : (Tensor, Tensor, int) -> (Tensor)")
        emit("aten::glu_backward.grad_input : (Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::grid_sampler_2d_backward : (Tensor, Tensor, Tensor, int, int, bool, bool[]) -> (Tensor, Tensor)")
        emit("aten::grid_sampler_3d_backward : (Tensor, Tensor, Tensor, int, int, bool) -> (Tensor, Tensor)")
        emit("aten::hardshrink_backward : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::hardshrink_backward.grad_input : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::hardsigmoid_backward : (Tensor, Tensor) -> (Tensor)")
        emit("aten::hardsigmoid_backward.grad_input : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::hardtanh.out : (Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::hardtanh_backward : (Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::hardtanh_backward.grad_input : (Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::heaviside.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::histogram.bins_tensor_out : (Tensor, Tensor, Tensor?, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::histogram.bin_ct_out : (Tensor, int, float[]?, Tensor?, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::index_select.out : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_select.dimname_out : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::_cudnn_init_dropout_state : (float, bool, int, int?, int?, Device?, bool?) -> (Tensor)")
        emit("aten::_empty_per_channel_affine_quantized : (int[], Tensor, Tensor, int, int?, int?, Device?, bool?, int?) -> (Tensor)")
        emit("aten::is_set_to : (Tensor, Tensor) -> (bool)")
        emit("aten::_assert_async : (Tensor) -> ()")
        emit("aten::linspace.out : (Scalar, Scalar, int?, Tensor) -> (Tensor)")
        emit("aten::native_group_norm_backward : (Tensor, Tensor, Tensor, Tensor, Tensor?, int, int, int, int, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::logspace.out : (Scalar, Scalar, int?, float, Tensor) -> (Tensor)")
        emit("aten::_cdist_backward : (Tensor, Tensor, Tensor, float, Tensor) -> (Tensor)")
        emit("aten::ones.out : (int[], Tensor) -> (Tensor)")
        emit("aten::_foreach_lgamma : (Tensor[]) -> (Tensor[])")
        emit("aten::range.out : (Scalar, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::_det_lu_based_helper_backward_helper : (Tensor, Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::zeros.out : (int[], Tensor) -> (Tensor)")
        emit("aten::fft_fftfreq.out : (int, float, Tensor) -> (Tensor)")
        emit("aten::fft_rfftfreq.out : (int, float, Tensor) -> (Tensor)")
        emit("aten::isposinf.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_pin_memory : (Tensor, Device?) -> (Tensor)")
        emit("aten::isneginf.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::sgn.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::copysign_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::copysign_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::kl_div_backward : (Tensor, Tensor, Tensor, int, bool) -> (Tensor)")
        emit("aten::cumprod_ : (Tensor, int, int?) -> (Tensor)")
        emit("aten::cumprod_.dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::l1_loss_backward.grad_input : (Tensor, Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::l1_loss_backward : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::cumsum_ : (Tensor, int, int?) -> (Tensor)")
        emit("aten::cumsum_.dimname : (Tensor, str, int?) -> (Tensor)")
        emit("aten::_ctc_loss : (Tensor, Tensor, int[], int[], int, bool) -> (Tensor, Tensor)")
        emit("aten::_ctc_loss_backward : (Tensor, Tensor, Tensor, int[], int[], Tensor, Tensor, int, bool) -> (Tensor)")
        emit("aten::_embedding_bag_forward_only : (Tensor, Tensor, Tensor, bool, int, bool, Tensor?, bool, int) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::lcm.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_embedding_bag : (Tensor, Tensor, Tensor, bool, int, bool, Tensor?, bool, int) -> (Tensor, Tensor, Tensor, Tensor)")
        emit("aten::_embedding_bag_dense_backward : (Tensor, Tensor, Tensor, Tensor, Tensor, int, bool, int, Tensor?, int) -> (Tensor)")
        emit("aten::_embedding_bag_per_sample_weights_backward : (Tensor, Tensor, Tensor, Tensor, Tensor, int, int) -> (Tensor)")
        emit("aten::leaky_relu.out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::exp2.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::exp2_ : (Tensor) -> (Tensor)")
        emit("aten::leaky_relu_backward : (Tensor, Tensor, Scalar, bool) -> (Tensor)")
        emit("aten::leaky_relu_backward.grad_input : (Tensor, Tensor, Scalar, bool, Tensor) -> (Tensor)")
        emit("aten::gcd_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::lcm_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::lerp.Scalar_out : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::lerp.Tensor_out : (Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::_index_put_impl_ : (Tensor, Tensor?[], Tensor, bool, bool) -> (Tensor)")
        emit("aten::isin.Tensor_Tensor_out : (Tensor, Tensor, bool, bool, Tensor) -> (Tensor)")
        emit("aten::isin.Tensor_Scalar_out : (Tensor, Scalar, bool, bool, Tensor) -> (Tensor)")
        emit("aten::isin.Scalar_Tensor_out : (Scalar, Tensor, bool, bool, Tensor) -> (Tensor)")
        emit("aten::log_sigmoid_backward : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::log_sigmoid_backward.grad_input : (Tensor, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::native_layer_norm_backward : (Tensor, Tensor, int[], Tensor, Tensor, Tensor?, Tensor?, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_foreach_cos : (Tensor[]) -> (Tensor[])")
        emit("aten::nan_to_num.out : (Tensor, float?, float?, float?, Tensor) -> (Tensor)")
        emit("aten::_foreach_asin : (Tensor[]) -> (Tensor[])")
        emit("aten::xlogy.OutTensor : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::xlogy.OutScalar_Self : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::xlogy.OutScalar_Other : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::xlogy_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::xlogy_.Scalar_Other : (Tensor, Scalar) -> (Tensor)")
        emit("aten::log_sigmoid_forward.output : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_log_softmax : (Tensor, int, bool) -> (Tensor)")
        emit("aten::_log_softmax.out : (Tensor, int, bool, Tensor) -> (Tensor)")
        emit("aten::_logcumsumexp : (Tensor, int) -> (Tensor)")
        emit("aten::_logcumsumexp.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_log_softmax_backward_data.out : (Tensor, Tensor, int, int, Tensor) -> (Tensor)")
        emit("aten::_aminmax : (Tensor) -> (Tensor, Tensor)")
        emit("aten::_aminmax.dim : (Tensor, int, bool) -> (Tensor, Tensor)")
        emit("aten::mvlgamma.out : (Tensor, int, Tensor) -> (Tensor)")
        emit("aten::narrow_copy.out : (Tensor, int, int, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_atan : (Tensor[]) -> (Tensor[])")
        emit("aten::native_batch_norm : (Tensor, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, float) -> (Tensor, Tensor, Tensor)")
        emit("aten::native_batch_norm.out : (Tensor, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, float, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::_foreach_atan_ : (Tensor[]) -> ()")
        emit("aten::native_batch_norm_backward : (Tensor, Tensor, Tensor?, Tensor?, Tensor?, Tensor?, Tensor?, bool, float, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_foreach_ceil : (Tensor[]) -> (Tensor[])")
        emit("aten::batch_norm_update_stats : (Tensor, Tensor?, Tensor?, float) -> (Tensor, Tensor)")
        emit("aten::_pdist_forward : (Tensor, float) -> (Tensor)")
        emit("aten::_pdist_backward : (Tensor, Tensor, float, Tensor) -> (Tensor)")
        emit("aten::prelu_backward : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::bucketize.Tensor_out : (Tensor, Tensor, bool, bool, Tensor) -> (Tensor)")
        emit("aten::silu.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::silu_ : (Tensor) -> (Tensor)")
        emit("aten::mish.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::renorm_ : (Tensor, Scalar, int, Scalar) -> (Tensor)")
        emit("aten::logit.out : (Tensor, float?, Tensor) -> (Tensor)")
        emit("aten::logit_ : (Tensor, float?) -> (Tensor)")
        emit("aten::sinc.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_softmax.out : (Tensor, int, bool, Tensor) -> (Tensor)")
        emit("aten::_softmax_backward_data.out : (Tensor, Tensor, int, int, Tensor) -> (Tensor)")
        emit("aten::sspaddmm.out : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::nansum.IntList_out : (Tensor, int[], bool, int?, Tensor) -> (Tensor)")
        emit("aten::_foreach_acos_ : (Tensor[]) -> ()")
        emit("aten::_dirichlet_grad : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::max_pool2d_with_indices_backward : (Tensor, Tensor, int[], int[], int[], int[], bool, Tensor) -> (Tensor)")
        emit("aten::max_pool2d_with_indices_backward.grad_input : (Tensor, Tensor, int[], int[], int[], int[], bool, Tensor, Tensor) -> (Tensor)")
        emit("aten::heaviside_ : (Tensor, Tensor) -> (Tensor)")
        emit("aten::to_mkldnn : (Tensor, int?) -> (Tensor)")
        emit("aten::_make_per_tensor_quantized_tensor : (Tensor, float, int) -> (Tensor)")
        emit("aten::max_pool3d_with_indices_backward : (Tensor, Tensor, int[], int[], int[], int[], bool, Tensor) -> (Tensor)")
        emit("aten::max_pool3d_with_indices_backward.grad_input : (Tensor, Tensor, int[], int[], int[], int[], bool, Tensor, Tensor) -> (Tensor)")
        emit("aten::_make_per_channel_quantized_tensor : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams : (Tensor, Tensor, Tensor, Tensor, int, int) -> (Tensor, Tensor)")
        emit("aten::max_unpool2d_backward : (Tensor, Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::max_unpool2d_backward.grad_input : (Tensor, Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_fake_quantize_learnable_per_tensor_affine : (Tensor, Tensor, Tensor, int, int, float) -> (Tensor)")
        emit("aten::_fake_quantize_learnable_per_channel_affine : (Tensor, Tensor, Tensor, int, int, int, float) -> (Tensor)")
        emit("aten::max_unpool3d_backward : (Tensor, Tensor, Tensor, int[], int[], int[]) -> (Tensor)")
        emit("aten::max_unpool3d_backward.grad_input : (Tensor, Tensor, Tensor, int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::_fused_moving_avg_obs_fq_helper : (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, float, int, int, int, bool, bool) -> (Tensor, Tensor)")
        emit("aten::masked_scatter_ : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_add_.alpha : (Tensor, int, Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::index_add_ : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter.src_out : (Tensor, int, Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::scatter.value_out : (Tensor, int, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::scatter.reduce_out : (Tensor, int, Tensor, Tensor, str, Tensor) -> (Tensor)")
        emit("aten::scatter.value_reduce_out : (Tensor, int, Tensor, Scalar, str, Tensor) -> (Tensor)")
        emit("aten::bitwise_and.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_and.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_foreach_log10_ : (Tensor[]) -> ()")
        emit("aten::bitwise_or.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_or.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_foreach_log1p_ : (Tensor[]) -> ()")
        emit("aten::bitwise_or_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_or_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::bitwise_xor.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_xor.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_foreach_log2 : (Tensor[]) -> (Tensor[])")
        emit("aten::bitwise_xor_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_xor_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__lshift__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__lshift__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__ilshift__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__ilshift__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_left_shift.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_left_shift.Tensor_Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::bitwise_left_shift_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_left_shift_.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__rshift__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__rshift__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::__irshift__.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::__irshift__.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift.Tensor_Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::bitwise_right_shift_.Tensor_Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::tril_ : (Tensor, int) -> (Tensor)")
        emit("aten::lerp_.Scalar : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::addbmm_ : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::ge_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::le_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::le_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::take.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::nonzero.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_symeig_helper : (Tensor, bool, bool) -> (Tensor, Tensor)")
        emit("aten::_svd_helper : (Tensor, bool, bool) -> (Tensor, Tensor, Tensor)")
        emit("aten::_cholesky_solve_helper : (Tensor, Tensor, bool) -> (Tensor)")
        emit("aten::_solve_helper : (Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_histogramdd_bin_edges : (Tensor, int[], float[]?, Tensor?, bool) -> (Tensor[])")
        emit("aten::_histogramdd_from_bin_cts : (Tensor, int[], float[]?, Tensor?, bool) -> (Tensor)")
        emit("aten::_histogramdd_from_bin_tensors : (Tensor, Tensor[], Tensor?, bool) -> (Tensor)")
        emit("aten::remainder.Tensor_out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::remainder.Scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::_nnpack_spatial_convolution : (Tensor, Tensor, Tensor?, int[], int[]) -> (Tensor)")
        emit("aten::remainder_.Tensor : (Tensor, Tensor) -> (Tensor)")
        emit("aten::remainder_.Scalar : (Tensor, Scalar) -> (Tensor)")
        emit("aten::maximum.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::minimum.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::sort.values : (Tensor, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::sort.values_stable : (Tensor, bool?, int, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::sort.dimname_values : (Tensor, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::sort.dimname_values_stable : (Tensor, bool?, str, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::topk.values : (Tensor, int, int, bool, bool, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::unfold_backward : (Tensor, int[], int, int, int) -> (Tensor)")
        emit("aten::mkldnn_convolution : (Tensor, Tensor, Tensor?, int[], int[], int[], int) -> (Tensor)")
        emit("aten::_index_copy_ : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::mkldnn_convolution_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_cat : (Tensor[], int) -> (Tensor)")
        emit("aten::_cat.out : (Tensor[], int, Tensor) -> (Tensor)")
        emit("aten::_foreach_add.Scalar : (Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_add.List : (Tensor[], Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_add.ScalarList : (Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::_foreach_add_.Scalar : (Tensor[], Scalar) -> ()")
        emit("aten::_foreach_add_.List : (Tensor[], Tensor[], Scalar) -> ()")
        emit("aten::_foreach_add_.ScalarList : (Tensor[], Scalar[]) -> ()")
        emit("aten::_foreach_mul_.Scalar : (Tensor[], Scalar) -> ()")
        emit("aten::_foreach_mul_.List : (Tensor[], Tensor[]) -> ()")
        emit("aten::_foreach_mul_.ScalarList : (Tensor[], Scalar[]) -> ()")
        emit("aten::mse_loss_backward : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::mse_loss_backward.grad_input : (Tensor, Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_div.Scalar : (Tensor[], Scalar) -> (Tensor[])")
        emit("aten::_foreach_div.List : (Tensor[], Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_div.ScalarList : (Tensor[], Scalar[]) -> (Tensor[])")
        emit("aten::_foreach_div_.Scalar : (Tensor[], Scalar) -> ()")
        emit("aten::_foreach_div_.List : (Tensor[], Tensor[]) -> ()")
        emit("aten::_foreach_div_.ScalarList : (Tensor[], Scalar[]) -> ()")
        emit("aten::_foreach_zero_ : (Tensor[]) -> ()")
        emit("aten::multi_margin_loss_backward : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor?, int) -> (Tensor)")
        emit("aten::multi_margin_loss_backward.grad_input : (Tensor, Tensor, Tensor, Scalar, Scalar, Tensor?, int, Tensor) -> (Tensor)")
        emit("aten::_foreach_exp_ : (Tensor[]) -> ()")
        emit("aten::_foreach_sqrt_ : (Tensor[]) -> ()")
        emit("aten::multilabel_margin_loss_backward : (Tensor, Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::multilabel_margin_loss_backward.grad_input : (Tensor, Tensor, Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_cos_ : (Tensor[]) -> ()")
        emit("aten::_foreach_cosh : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_cosh_ : (Tensor[]) -> ()")
        emit("aten::_foreach_erf : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_erf_ : (Tensor[]) -> ()")
        emit("aten::_foreach_erfc : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_erfc_ : (Tensor[]) -> ()")
        emit("aten::_foreach_expm1 : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_floor : (Tensor[]) -> (Tensor[])")
        emit("aten::special_ndtri.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_log2_ : (Tensor[]) -> ()")
        emit("aten::_foreach_tan : (Tensor[]) -> (Tensor[])")
        emit("aten::nll_loss2d_backward : (Tensor, Tensor, Tensor, Tensor?, int, int, Tensor) -> (Tensor)")
        emit("aten::nll_loss2d_backward.grad_input : (Tensor, Tensor, Tensor, Tensor?, int, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_tan_ : (Tensor[]) -> ()")
        emit("aten::nll_loss2d_forward.output : (Tensor, Tensor, Tensor?, int, int, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_foreach_tanh : (Tensor[]) -> (Tensor[])")
        emit("aten::nll_loss_backward : (Tensor, Tensor, Tensor, Tensor?, int, int, Tensor) -> (Tensor)")
        emit("aten::nll_loss_backward.grad_input : (Tensor, Tensor, Tensor, Tensor?, int, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_tanh_ : (Tensor[]) -> ()")
        emit("aten::nll_loss_forward.output : (Tensor, Tensor, Tensor?, int, int, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_foreach_sin : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_sinh : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_round_ : (Tensor[]) -> ()")
        emit("aten::_foreach_frac_ : (Tensor[]) -> ()")
        emit("aten::_foreach_reciprocal : (Tensor[]) -> (Tensor[])")
        emit("aten::_euclidean_dist : (Tensor, Tensor) -> (Tensor)")
        emit("aten::_foreach_trunc : (Tensor[]) -> (Tensor[])")
        emit("aten::_foreach_addcdiv_.Scalar : (Tensor[], Tensor[], Tensor[], Scalar) -> ()")
        emit("aten::_foreach_addcdiv_.ScalarList : (Tensor[], Tensor[], Tensor[], Scalar[]) -> ()")
        emit("aten::_foreach_addcmul_.Scalar : (Tensor[], Tensor[], Tensor[], Scalar) -> ()")
        emit("aten::_foreach_addcmul_.ScalarList : (Tensor[], Tensor[], Tensor[], Scalar[]) -> ()")
        emit("aten::_foreach_maximum.List : (Tensor[], Tensor[]) -> (Tensor[])")
        emit("aten::smooth_l1_loss_backward.grad_input : (Tensor, Tensor, Tensor, int, float, Tensor) -> (Tensor)")
        emit("aten::smooth_l1_loss_backward : (Tensor, Tensor, Tensor, int, float) -> (Tensor)")
        emit("aten::huber_loss_backward.out : (Tensor, Tensor, Tensor, int, float, Tensor) -> (Tensor)")
        emit("aten::huber_loss_backward : (Tensor, Tensor, Tensor, int, float) -> (Tensor)")
        emit("aten::elu_ : (Tensor, Scalar, Scalar, Scalar) -> (Tensor)")
        emit("aten::hardsigmoid_ : (Tensor) -> (Tensor)")
        emit("aten::hardtanh_ : (Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::hardswish_ : (Tensor) -> (Tensor)")
        emit("aten::softplus_backward : (Tensor, Tensor, Scalar, Scalar, Tensor) -> (Tensor)")
        emit("aten::softplus_backward.grad_input : (Tensor, Tensor, Scalar, Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::softshrink_backward : (Tensor, Tensor, Scalar) -> (Tensor)")
        emit("aten::softshrink_backward.grad_input : (Tensor, Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::reflection_pad1d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::reflection_pad1d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_test_optional_intlist : (Tensor, int[]?) -> (Tensor)")
        emit("aten::reflection_pad2d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::reflection_pad2d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_segment_reduce_backward : (Tensor, Tensor, Tensor, str, Tensor?, int) -> (Tensor)")
        emit("aten::reflection_pad3d.out : (Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_grid_sampler_2d_cpu_fallback : (Tensor, Tensor, int, int, bool) -> (Tensor)")
        emit("aten::reflection_pad3d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::reflection_pad3d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::index_copy_ : (Tensor, int, Tensor, Tensor) -> (Tensor)")
        emit("aten::index_copy_.dimname : (Tensor, str, Tensor, Tensor) -> (Tensor)")
        emit("aten::replication_pad1d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::replication_pad1d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::linalg_pinv.atol_rtol_tensor_out : (Tensor, Tensor?, Tensor?, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_pinv.atol_rtol_float_out : (Tensor, float?, float?, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_pinv.out : (Tensor, float, bool, Tensor) -> (Tensor)")
        emit("aten::linalg_pinv.out_rcond_tensor : (Tensor, Tensor, bool, Tensor) -> (Tensor)")
        emit("aten::replication_pad2d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::replication_pad2d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_unpack_dual : (Tensor, int) -> (Tensor, Tensor)")
        emit("aten::replication_pad3d_backward : (Tensor, Tensor, int[]) -> (Tensor)")
        emit("aten::replication_pad3d_backward.grad_input : (Tensor, Tensor, int[], Tensor) -> (Tensor)")
        emit("aten::_sobol_engine_draw : (Tensor, int, Tensor, int, int, int?) -> (Tensor, Tensor)")
        emit("aten::upsample_linear1d_backward : (Tensor, int[], int[], bool, float?) -> (Tensor)")
        emit("aten::upsample_linear1d_backward.grad_input : (Tensor, int[], int[], bool, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_linear1d_backward.vec : (Tensor, int[]?, int[], bool, float[]?) -> (Tensor)")
        emit("aten::upsample_bilinear2d_backward : (Tensor, int[], int[], bool, float?, float?) -> (Tensor)")
        emit("aten::upsample_bilinear2d_backward.grad_input : (Tensor, int[], int[], bool, float?, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_bilinear2d_backward.vec : (Tensor, int[]?, int[], bool, float[]?) -> (Tensor)")
        emit("aten::upsample_bicubic2d.out : (Tensor, int[], bool, float?, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_bicubic2d_backward : (Tensor, int[], int[], bool, float?, float?) -> (Tensor)")
        emit("aten::upsample_bicubic2d_backward.grad_input : (Tensor, int[], int[], bool, float?, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_bicubic2d_backward.vec : (Tensor, int[]?, int[], bool, float[]?) -> (Tensor)")
        emit("aten::upsample_nearest1d_backward : (Tensor, int[], int[], float?) -> (Tensor)")
        emit("aten::upsample_nearest1d_backward.grad_input : (Tensor, int[], int[], float?, Tensor) -> (Tensor)")
        emit("aten::upsample_nearest1d_backward.vec : (Tensor, int[]?, int[], float[]?) -> (Tensor)")
        emit("aten::upsample_nearest2d_backward : (Tensor, int[], int[], float?, float?) -> (Tensor)")
        emit("aten::upsample_nearest2d_backward.grad_input : (Tensor, int[], int[], float?, float?, Tensor) -> (Tensor)")
        emit("aten::upsample_nearest2d_backward.vec : (Tensor, int[]?, int[], float[]?) -> (Tensor)")
        emit("aten::slow_conv_transpose2d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::slow_conv_transpose2d.out : (Tensor, Tensor, int[], Tensor?, int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::slow_conv_transpose2d_backward.grad_output : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int[], Tensor, Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv_transpose2d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int[], Tensor, Tensor, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv_transpose3d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::slow_conv_transpose3d.out : (Tensor, Tensor, int[], Tensor?, int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::slow_conv_transpose3d_backward.grad_output : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int[], Tensor, Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv_transpose3d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], int[], int[], Tensor, Tensor, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::_slow_conv2d_forward : (Tensor, Tensor, int[], Tensor?, int[], int[]) -> (Tensor, Tensor)")
        emit("aten::_slow_conv2d_forward.output : (Tensor, Tensor, int[], Tensor?, int[], int[], Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::_slow_conv2d_backward.grad_input : (Tensor, Tensor, Tensor, int[], int[], int[], Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::_slow_conv2d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], Tensor, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv3d_forward : (Tensor, Tensor, int[], Tensor?, int[], int[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv3d_forward.output : (Tensor, Tensor, int[], Tensor?, int[], int[], Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv3d_backward.grad_input : (Tensor, Tensor, Tensor, int[], int[], int[], Tensor, Tensor, Tensor, Tensor, Tensor) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv3d_backward.output_mask : (Tensor, Tensor, Tensor, int[], int[], int[], Tensor, Tensor, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv_dilated2d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[]) -> (Tensor)")
        emit("aten::slow_conv_dilated2d_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::slow_conv_dilated3d : (Tensor, Tensor, int[], Tensor?, int[], int[], int[]) -> (Tensor)")
        emit("aten::slow_conv_dilated3d_backward : (Tensor, Tensor, Tensor, int[], int[], int[], int[], bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::im2col_backward : (Tensor, int[], int[], int[], int[], int[]) -> (Tensor)")
        emit("aten::im2col_backward.grad_input : (Tensor, int[], int[], int[], int[], int[], Tensor) -> (Tensor)")
        emit("aten::special_erfcx.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlog1py.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlog1py.self_scalar_out : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_xlog1py.other_scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::special_zeta.out : (Tensor, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_zeta.self_scalar_out : (Scalar, Tensor, Tensor) -> (Tensor)")
        emit("aten::special_zeta.other_scalar_out : (Tensor, Scalar, Tensor) -> (Tensor)")
        emit("aten::special_i0e.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_i1.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::special_i1e.out : (Tensor, Tensor) -> (Tensor)")
        emit("aten::linalg_slogdet.out : (Tensor, Tensor, Tensor) -> (Tensor, Tensor)")
        emit("aten::linalg_vector_norm.out : (Tensor, Scalar, int[]?, bool, int?, Tensor) -> (Tensor)")
        emit("aten::_test_optional_filled_intlist : (Tensor, int[]?) -> (Tensor)")
        emit("aten::_neg_view : (Tensor) -> (Tensor)")
        emit("aten::addr_ : (Tensor, Tensor, Tensor, Scalar, Scalar) -> (Tensor)")
        emit("aten::convolution_overrideable : (Tensor, Tensor, Tensor?, int[], int[], int[], bool, int[], int) -> (Tensor)")
        emit("aten::convolution_backward_overrideable : (Tensor, Tensor, Tensor, int[], int[], int[], bool, int[], int, bool[]) -> (Tensor, Tensor, Tensor)")
        emit("aten::nan_to_num_ : (Tensor, float?, float?, float?) -> (Tensor)")
        emit("aten::celu_ : (Tensor, Scalar) -> (Tensor)")
        emit("aten::_pack_padded_sequence : (Tensor, Tensor, bool) -> (Tensor, Tensor)")
        emit("aten::soft_margin_loss_backward : (Tensor, Tensor, Tensor, int) -> (Tensor)")
        emit("aten::soft_margin_loss_backward.grad_input : (Tensor, Tensor, Tensor, int, Tensor) -> (Tensor)")
        emit("aten::rrelu_with_noise_backward : (Tensor, Tensor, Tensor, Scalar, Scalar, bool, bool) -> (Tensor)")
        emit("aten::_test_warn_in_autograd : (Tensor) -> (Tensor)")
        emit("aten::_cast_Byte : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Char : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Double : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Float : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Int : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Long : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Short : (Tensor, bool) -> (Tensor)")
        emit("aten::_cast_Half : (Tensor, bool) -> (Tensor)")
        emit("aten::_use_cudnn_rnn_flatten_weight : () -> (bool)")
        emit("aten::_sobol_engine_ff_ : (Tensor, int, Tensor, int, int) -> (Tensor)")
        emit("aten::feature_dropout_ : (Tensor, float, bool) -> (Tensor)")

def emit_quantized_ops(torch_ir_dir: str, registry: Registry):
    td_file = os.path.join(torch_ir_dir, "GeneratedQuantizedOps.td")
    with open(td_file, "w") as f:
        f.write(ODS_BANNER)

        def emit(key, **kwargs):
            emit_op(registry[key], f, **kwargs)

        emit(
            "quantized::linear : (Tensor, __torch__.torch.classes.quantized.LinearPackedParamsBase, float, int) -> (Tensor)",
            traits=["HasValueSemantics"])


def dump_registered_ops(outfile: TextIO, registry: Registry):
    for _, v in sorted(registry.by_unique_key.items()):
        outfile.write(repr(v))


def load_registry() -> Registry:
    return Registry([JitOperator(op_info) for op_info in get_registered_ops()])


def main(args: argparse.Namespace):
    registry = load_registry()
    if args.debug_registry_dump:
        with open(args.debug_registry_dump, "w") as debug_registry_dump:
            dump_registered_ops(debug_registry_dump, registry)
    emit_prim_ops(args.torch_ir_dir, registry)
    emit_aten_ops(args.torch_ir_dir, registry)
    emit_quantized_ops(args.torch_ir_dir, registry)


def _create_argparse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(prog="generate_ods")
    parser.add_argument(
        "--torch_ir_dir",
        required=True,
        help="Directory containing the Torch dialect definition")
    parser.add_argument(
        "--debug_registry_dump",
        help="File to dump the the PyTorch JIT operator registry into")
    return parser


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    parser = _create_argparse()
    args = parser.parse_args()
    main(args)
