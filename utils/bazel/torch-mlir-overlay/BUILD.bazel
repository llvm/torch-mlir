# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

load("@llvm-project//mlir:tblgen.bzl", "gentbl_cc_library", "td_library")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@llvm-project//mlir:build_defs.bzl", "mlir_c_api_cc_library")
load("@torch-mlir//:build_defs.bzl", "PYBIND11_COPTS", "PYBIND11_FEATURES")

package(
    default_visibility = [
        "//visibility:public",
    ],
)

# Format bazel BUILD and .bzl files with a standard convention
# Invoke as `bazel run @torch-mlir//:buildifier`
buildifier(
    name = "buildifier",
)

# Torch Dialect/IR
td_library(
    name = "MLIRTorchOpsIncGenTdFiles",
    srcs = glob([
        "include/torch-mlir/Dialect/Torch/IR/*.td",
    ]),
    includes = ["include"],
    deps = [
        "@llvm-project//mlir:CastInterfacesTdFiles",
        "@llvm-project//mlir:ControlFlowInterfacesTdFiles",
        "@llvm-project//mlir:InferTypeOpInterfaceTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

gentbl_cc_library(
    name = "MLIRTorchOpsIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-op-decls"],
            "include/torch-mlir/Dialect/Torch/IR/TorchOps.h.inc",
        ),
        (
            ["-gen-op-defs"],
            "include/torch-mlir/Dialect/Torch/IR/TorchOps.cpp.inc",
        ),
        (
            [
                "-gen-dialect-decls",
                "-dialect=torch",
            ],
            "include/torch-mlir/Dialect/Torch/IR/TorchDialect.h.inc",
        ),
        (
            [
                "-gen-dialect-defs",
                "-dialect=torch",
            ],
            "include/torch-mlir/Dialect/Torch/IR/TorchDialect.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Dialect/Torch/IR/TorchOps.td",
    deps = [
        ":MLIRTorchOpsIncGenTdFiles",
    ],
)

gentbl_cc_library(
    name = "MLIRTorchTypesIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-typedef-decls"],
            "include/torch-mlir/Dialect/Torch/IR/TorchTypes.h.inc",
        ),
        (
            ["-gen-typedef-defs"],
            "include/torch-mlir/Dialect/Torch/IR/TorchTypes.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Dialect/Torch/IR/TorchTypes.td",
    deps = [
        ":MLIRTorchOpsIncGenTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRTorchDialectUtils",
    srcs = [
        "lib/Dialect/Torch/Utils/TorchUpstream.cpp",
        "lib/Dialect/Torch/Utils/Utils.cpp",
    ],
    hdrs = [
        "include/torch-mlir/Dialect/Torch/IR/TorchOps.h",
        "include/torch-mlir/Dialect/Torch/IR/TorchTraits.h",
        "include/torch-mlir/Dialect/Torch/IR/TorchTypes.h",
        "include/torch-mlir/Dialect/Torch/Utils/TorchUpstream.h",
        "include/torch-mlir/Dialect/Torch/Utils/Utils.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":MLIRTorchOpsIncGen",
        ":MLIRTorchTypesIncGen",
        "@llvm-project//mlir:ControlFlowInterfaces",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:InferTypeOpInterface",
    ],
)

cc_library(
    name = "TorchMLIRTorchDialect",
    srcs = [
        "lib/Dialect/Torch/IR/TorchDialect.cpp",
        "lib/Dialect/Torch/IR/TorchOps.cpp",
        "lib/Dialect/Torch/IR/TorchOpsODSGenerated.cpp",
        "lib/Dialect/Torch/IR/TorchTypes.cpp",
        "lib/Dialect/Torch/IR/UtilsForODSGenerated.cpp",
        "lib/Dialect/Torch/IR/UtilsForODSGenerated.h",
    ],
    hdrs = glob([
        "include/torch-mlir/Dialect/Torch/IR/*.h",
    ]),
    includes = ["include"],
    deps = [
        ":MLIRTorchOpsIncGen",
        ":MLIRTorchTypesIncGen",
        ":TorchMLIRTorchDialectUtils",
        "@llvm-project//mlir:ControlFlowInterfaces",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:InferTypeOpInterface",
        "@llvm-project//mlir:TransformUtils",
    ],
)

# Torch Dialect/Transforms
td_library(
    name = "TorchMLIRTorchPassesTdFiles",
    srcs = [
        "include/torch-mlir/Dialect/Torch/Transforms/Passes.td",
    ],
    includes = ["include"],
    deps = [
        "@llvm-project//mlir:OpBaseTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTorchPassesIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-pass-decls"],
            "include/torch-mlir/Dialect/Torch/Transforms/Passes.h.inc",
        ),
        (
            ["-gen-pass-capi-header"],
            "include/torch-mlir/Dialect/Torch/Transforms/Transforms.capi.h.inc",
        ),
        (
            ["-gen-pass-capi-impl"],
            "include/torch-mlir/Dialect/Torch/Transforms/Transforms.capi.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Dialect/Torch/Transforms/Passes.td",
    deps = [
        ":TorchMLIRTorchPassesTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRTorchPasses",
    srcs = glob([
        "lib/Dialect/Torch/Transforms/*.cpp",
        "lib/Dialect/Torch/Transforms/*.h",
    ]),
    hdrs = [
        "include/torch-mlir/Dialect/Torch/Transforms/Passes.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRTorchDialect",
        ":TorchMLIRTorchPassesIncGen",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:Parser",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:Transforms",
    ],
)

# TorchConversion diaelct
td_library(
    name = "MLIRTorchConversionOpsTdFiles",
    srcs = [
        "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionBase.td",
        "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionOps.td",
    ],
    includes = ["include"],
    deps = [
        ":MLIRTorchOpsIncGenTdFiles",
        "@llvm-project//mlir:AttrTdFiles",
        "@llvm-project//mlir:CastInterfacesTdFiles",
        "@llvm-project//mlir:ControlFlowInterfacesTdFiles",
        "@llvm-project//mlir:InferTypeOpInterfaceTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

gentbl_cc_library(
    name = "MLIRTorchConversionOpsIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-op-decls"],
            "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionOps.h.inc",
        ),
        (
            ["-gen-op-defs"],
            "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionOps.cpp.inc",
        ),
        (
            [
                "-gen-dialect-decls",
                "-dialect=torch_c",
            ],
            "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionDialect.h.inc",
        ),
        (
            [
                "-gen-dialect-defs",
                "-dialect=torch_c",
            ],
            "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionDialect.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Dialect/TorchConversion/IR/TorchConversionOps.td",
    deps = [
        ":MLIRTorchConversionOpsTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRTorchConversionDialect",
    srcs = glob(["lib/Dialect/TorchConversion/IR/*.cpp"]),
    hdrs = glob(["include/torch-mlir/Dialect/TorchConversion/IR/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":MLIRTorchConversionOpsIncGen",
        ":TorchMLIRTorchDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:InferTypeOpInterface",
    ],
)

# Conversion
td_library(
    name = "TorchMLIRConversionPassesTdFiles",
    srcs = [
        "include/torch-mlir/Conversion/Passes.td",
    ],
    includes = ["include"],
)

gentbl_cc_library(
    name = "TorchMLIRConversionPassesIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            [
                "-gen-pass-decls",
                "-DTORCH_MLIR_ENABLE_MHLO",
            ],
            "include/torch-mlir/Conversion/Passes.h.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Conversion/Passes.td",
    deps = [
        ":TorchMLIRConversionPassesTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
    ],
)

# TorchConversion transforms
td_library(
    name = "TorchMLIRTorchConversionPassesTdFiles",
    srcs = [
        "include/torch-mlir/Dialect/TorchConversion/Transforms/Passes.td",
    ],
    deps = [
        "@llvm-project//mlir:OpBaseTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTorchConversionPassesIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-pass-decls"],
            "include/torch-mlir/Dialect/TorchConversion/Transforms/Passes.h.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/Dialect/TorchConversion/Transforms/Passes.td",
    deps = [
        ":TorchMLIRTorchConversionPassesTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRConversionUtils",
    srcs = [
        "lib/Conversion/Utils/Utils.cpp",
    ],
    hdrs = [
        "include/torch-mlir/Conversion/Utils/Utils.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRTorchDialect",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ControlFlowDialect",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:Transforms",
    ],
)

cc_library(
    name = "TorchMLIRTorchToLinalg",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToLinalg/*.cpp",
        "lib/Conversion/TorchToLinalg/*.h",
    ]),
    hdrs = glob(["include/torch-mlir/Conversion/TorchToLinalg/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        ":TorchMLIRTorchDialect",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ControlFlowDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:TensorUtils",
        "@llvm-project//mlir:TransformUtils",
    ],
)

cc_library(
    name = "TorchMLIRTorchToSCF",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToSCF/*.cpp",
    ]),
    hdrs = glob(["include/torch-mlir/Conversion/TorchToSCF/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:ArithDialect",
        "@llvm-project//mlir:ControlFlowDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:TensorUtils",
        "@llvm-project//mlir:TransformUtils",
    ],
)

cc_library(
    name = "TorchMLIRTorchToArith",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToArith/*.cpp",
    ]),
    hdrs = glob([
        "include/torch-mlir/Conversion/TorchToArith/*.h",
    ]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:Dialect",
    ],
)

cc_library(
    name = "TorchMLIRTorchConversionToMLProgram",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchConversionToMLProgram/*.cpp",
    ]),
    hdrs = glob([
        "include/torch-mlir/Conversion/TorchConversionToMLProgram/*.h",
    ]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:MLProgramDialect",
    ],
)

cc_library(
    name = "TorchMLIRTorchToTMTensor",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToTMTensor/*.cpp",
    ]),
    hdrs = glob(["include/torch-mlir/Conversion/TorchToTMTensor/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTMTensorDialect",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:LinalgDialect",
    ],
)

cc_library(
    name = "TorchMLIRTorchToMhlo",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToMhlo/*.h",
        "lib/Conversion/TorchToMhlo/*.cpp",
    ]),
    hdrs = glob(["include/torch-mlir/Conversion/TorchToMhlo/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:Dialect",
        "@mlir-hlo//:mlir_hlo",
    ],
)

cc_library(
    name = "TorchMLIRConversionPasses",
    srcs = [
        "lib/Conversion/Passes.cpp",
    ],
    hdrs = [
        "include/torch-mlir/Conversion/Passes.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRTorchConversionToMLProgram",
        ":TorchMLIRTorchToArith",
        ":TorchMLIRTorchToLinalg",
        ":TorchMLIRTorchToMhlo",
        ":TorchMLIRTorchToSCF",
        ":TorchMLIRTorchToTMTensor",
        ":TorchMLIRTorchToTosa",
    ],
)

cc_library(
    name = "TorchMLIRTorchConversionPasses",
    srcs = glob([
        "lib/Dialect/TorchConversion/Transforms/*.cpp",
        "lib/Dialect/TorchConversion/Transforms/*.h",
    ]),
    hdrs = glob(["include/torch-mlir/Dialect/TorchConversion/Transforms/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        ":TorchMLIRTorchConversionPassesIncGen",
        ":TorchMLIRTorchConversionToMLProgram",
        ":TorchMLIRTorchDialect",
        ":TorchMLIRTorchPasses",
        ":TorchMLIRTorchToArith",
        ":TorchMLIRTorchToLinalg",
        ":TorchMLIRTorchToMhlo",
        ":TorchMLIRTorchToSCF",
        ":TorchMLIRTorchToTMTensor",
        ":TorchMLIRTorchToTosa",
        "@llvm-project//mlir:ConversionPasses",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:MemRefTransforms",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:TosaDialect",
    ],
)

cc_library(
    name = "TorchMLIRTorchToTosa",
    srcs = glob([
        "lib/Conversion/*.h",
        "lib/Conversion/TorchToTosa/*.cpp",
    ]),
    hdrs = glob(["include/torch-mlir/Conversion/TorchToTosa/*.h"]),
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPassesIncGen",
        ":TorchMLIRConversionUtils",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:QuantOps",
        "@llvm-project//mlir:TosaDialect",
    ],
)

# Dialects.TorchConversion
cc_library(
    name = "TorchMLIRTorchBackendTypeConversion",
    srcs = [
        "lib/Dialect/TorchConversion/Transforms/BackendTypeConversion.cpp",
    ],
    hdrs = [
        "include/torch-mlir/Dialect/TorchConversion/Transforms/BackendTypeConversion.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:FuncTransforms",
    ],
)

# External dialects
td_library(
    name = "TorchMLIRTMTensorOpsTdFiles",
    srcs = [
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/ScalarLoopOpInterface.td",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorBase.td",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorInterfaces.td",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOps.td",
    ],
    includes = ["externals/llvm-external-projects/torch-mlir-dialects/include"],
    deps = [
        "@llvm-project//mlir:ControlFlowInterfacesTdFiles",
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:SideEffectInterfacesTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTMTensorInterfacesIncGen",
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    tbl_outs = [
        (
            ["-gen-op-interface-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOpInterfaces.h.inc",
        ),
        (
            ["-gen-op-interface-defs"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOpInterfaces.cpp.inc",
        ),
        (
            ["-gen-type-interface-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorTypeInterfaces.h.inc",
        ),
        (
            ["-gen-type-interface-defs"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorTypeInterfaces.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorInterfaces.td",
    deps = [
        ":TorchMLIRTMTensorOpsTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTMTensorScalarLoopOpInterfaceIncGen",
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    tbl_outs = [
        (
            ["-gen-op-interface-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/ScalarLoopOpInterface.h.inc",
        ),
        (
            ["-gen-op-interface-defs"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/ScalarLoopOpInterface.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/ScalarLoopOpInterface.td",
    deps = [
        ":TorchMLIRTMTensorOpsTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTMTensorOpsIncGen",
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    tbl_outs = [
        (
            ["-gen-op-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOps.h.inc",
        ),
        (
            ["-gen-op-defs"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOps.cpp.inc",
        ),
        (
            ["-gen-typedef-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorTypes.h.inc",
        ),
        (
            [
                "-gen-dialect-decls",
                "-dialect=tm_tensor",
            ],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorDialect.h.inc",
        ),
        (
            [
                "-gen-dialect-defs",
                "-dialect=tm_tensor",
            ],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorDialect.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOps.td",
    deps = [
        ":TorchMLIRTMTensorOpsTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRTMTensorDialect",
    srcs = [
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/IR/ScalarLoopOpInterface.cpp",
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/IR/TMTensorDialect.cpp",
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/IR/TMTensorInterfaces.cpp",
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/IR/TMTensorOps.cpp",
    ],
    hdrs = [
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/ScalarLoopOpInterface.h",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorDialect.h",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorInterfaces.h",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/IR/TMTensorOps.h",
    ],
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    deps = [
        ":TorchMLIRTMTensorInterfacesIncGen",
        ":TorchMLIRTMTensorOpsIncGen",
        ":TorchMLIRTMTensorScalarLoopOpInterfaceIncGen",
        "@llvm-project//mlir:AffineDialect",
        "@llvm-project//mlir:ControlFlowInterfaces",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:DialectUtils",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:ViewLikeInterface",
    ],
)

td_library(
    name = "TorchMLIRTMTensorTransformsPassesTdFiles",
    srcs = [
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.td",
    ],
    deps = [
        "@llvm-project//mlir:OpBaseTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRTMTensorTransformsPassesIncGen",
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    tbl_outs = [
        (
            ["-gen-pass-decls"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.h.inc",
        ),
        (
            ["-gen-pass-capi-header"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.h.cpi.inc",
        ),
        (
            ["-gen-pass-capi-impl"],
            "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.cpi.cpp.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.td",
    deps = [
        ":TorchMLIRTMTensorTransformsPassesTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRTMTensorPasses",
    srcs = [
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/Transforms/Bufferize.cpp",
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/Transforms/ConvertToLoops.cpp",
        "externals/llvm-external-projects/torch-mlir-dialects/lib/Dialect/TMTensor/Transforms/Passes.cpp",
    ],
    hdrs = [
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/PassDetail.h",
        "externals/llvm-external-projects/torch-mlir-dialects/include/torch-mlir-dialects/Dialect/TMTensor/Transforms/Passes.h",
    ],
    strip_include_prefix = "externals/llvm-external-projects/torch-mlir-dialects/include",
    deps = [
        ":TorchMLIRTMTensorDialect",
        ":TorchMLIRTMTensorTransformsPassesIncGen",
        "@llvm-project//mlir:BufferizationTransforms",
        "@llvm-project//mlir:FuncTransforms",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:Transforms",
    ],
)

# RefBackend
filegroup(
    name = "TorchMLIRRefBackendPassesDetails",
    srcs = [
        "lib/RefBackend/PassDetail.h",
    ],
)

td_library(
    name = "TorchMLIRRefBackendPassTdFiles",
    srcs = [
        "include/torch-mlir/RefBackend/Passes.td",
    ],
    deps = [
        "@llvm-project//mlir:OpBaseTdFiles",
    ],
)

gentbl_cc_library(
    name = "TorchMLIRRefBackendPassIncGen",
    strip_include_prefix = "include",
    tbl_outs = [
        (
            ["-gen-pass-decls"],
            "include/torch-mlir/RefBackend/Passes.h.inc",
        ),
    ],
    tblgen = "@llvm-project//mlir:mlir-tblgen",
    td_file = "include/torch-mlir/RefBackend/Passes.td",
    deps = [
        ":TorchMLIRRefBackendPassTdFiles",
        "@llvm-project//mlir:PassBaseTdFiles",
    ],
)

cc_library(
    name = "TorchMLIRRefBackendPass",
    srcs = [
        "lib/RefBackend/RefBackend.cpp",
    ] + [":TorchMLIRRefBackendPassesDetails"],
    hdrs = [
        "include/torch-mlir/RefBackend/Passes.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRRefBackendPassIncGen",
        ":TorchMLIRTorchBackendTypeConversion",
        ":TorchMLIRTorchConversionDialect",
        "@llvm-project//mlir:ArithTransforms",
        "@llvm-project//mlir:LinalgDialect",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:MLProgramDialect",
        "@llvm-project//mlir:MathTransforms",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:Pass",
    ],
)

cc_library(
    name = "TorchMLIRInitAll",
    srcs = [
        "lib/InitAll.cpp",
    ],
    hdrs = [
        "include/torch-mlir/InitAll.h",
    ],
    strip_include_prefix = "include",
    deps = [
        ":TorchMLIRConversionPasses",
        ":TorchMLIRRefBackendPass",
        ":TorchMLIRTMTensorDialect",
        ":TorchMLIRTMTensorPasses",
        ":TorchMLIRTorchConversionDialect",
        ":TorchMLIRTorchConversionPasses",
        ":TorchMLIRTorchDialect",
        ":TorchMLIRTorchPasses",
        "@llvm-project//mlir:Dialect",
        "@llvm-project//mlir:DialectUtils",
        "@llvm-project//mlir:IR",
    ],
)

# tools
cc_binary(
    name = "torch-mlir-opt",
    srcs = [
        "tools/torch-mlir-opt/torch-mlir-opt.cpp",
    ],
    deps = [
        ":TorchMLIRInitAll",
        ":TorchMLIRTorchDialect",
        ":TorchMLIRTorchPasses",
        "@llvm-project//mlir:AllPassesAndDialects",
        "@llvm-project//mlir:MlirOptLib",
    ],
)

## for CAPI
mlir_c_api_cc_library(
    name = "TorchMLIRCAPI",
    srcs = [
        "lib/CAPI/Dialects.cpp",
        "lib/CAPI/Registration.cpp",
        "lib/CAPI/TorchOps.cpp",
        "lib/CAPI/TorchTypes.cpp",
        "lib/CAPI/Transforms.cpp",
    ],
    hdrs = [
        "include/torch-mlir-c/Dialects.h",
        "include/torch-mlir-c/Registration.h",
        "include/torch-mlir-c/TorchOps.h",
        "include/torch-mlir-c/TorchTypes.h",
        "include/torch-mlir-c/Transforms.h",
    ],
    capi_deps = [
        "@llvm-project//mlir:CAPIIR",
    ],
    includes = [
        "include",
    ],
    deps = [
        ":TorchMLIRInitAll",
        ":TorchMLIRTorchDialect",
        ":TorchMLIRTorchPasses",
    ],
)

TORCH_MLIR_BINDINGS_PYTHON_HEADERS = [
    "python/torch_mlir/**/*.h",
    "include/torch-mlir-c/*.h",
    "include/torch-mlir/**/*.h",
]

cc_library(
    name = "TORCHMLIRBindingsPythonHeaders",
    includes = [
        "include",
        "python",
    ],
    tags = [
        "manual",  # External dependency
    ],
    textual_hdrs = glob(TORCH_MLIR_BINDINGS_PYTHON_HEADERS),
    deps = [
        ":TorchMLIRCAPIHeaders",
        "@pybind11",
    ],
)

cc_library(
    name = "TORCHMLIRBindingsPythonHeadersAndDeps",
    includes = [
        "include",
        "python",
    ],
    tags = [
        "manual",  # External dependency
    ],
    textual_hdrs = glob(TORCH_MLIR_BINDINGS_PYTHON_HEADERS),
    deps = [
        ":TorchMLIRCAPI",
        "@pybind11",
    ],
)

# Target that bundles together the CAPI objects needed for
# MLIRBindingsPythonCoreNoCAPI.
cc_library(
    name = "MLIRBindingsPythonCAPIObjects",
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        "@llvm-project//mlir:CAPIAsyncObjects",
        "@llvm-project//mlir:CAPIConversionObjects",
        "@llvm-project//mlir:CAPIDebugObjects",
        "@llvm-project//mlir:CAPIExecutionEngineObjects",
        "@llvm-project//mlir:CAPIGPUObjects",
        "@llvm-project//mlir:CAPIIRObjects",
        "@llvm-project//mlir:CAPIInterfacesObjects",
        "@llvm-project//mlir:CAPILinalgObjects",
        "@llvm-project//mlir:CAPIPDLObjects",
        "@llvm-project//mlir:CAPIQuantObjects",
        "@llvm-project//mlir:CAPIRegisterEverythingObjects",
        "@llvm-project//mlir:CAPISparseTensorObjects",
        "@llvm-project//mlir:CAPITransformDialectObjects",
        "@llvm-project//mlir:CAPITransformsObjects",
    ],
)

cc_library(
    name = "TorchMLIRAggregateCAPI",
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":MLIRBindingsPythonCAPIObjects",
        ":TorchMLIRCAPIObjects",
    ],
)

cc_binary(
    name = "libTorchMLIRAggregateCAPI.so",
    linkshared = True,
    deps = [":TorchMLIRAggregateCAPI"],
)

cc_import(
    name = "libTorchMLIRAggregateCAPI",
    shared_library = ":libTorchMLIRAggregateCAPI.so",
)

py_binary(
    name = "autogen_ltc_backend",
    srcs = ["build_tools/autogen_ltc_backend.py"],
    tags = ["no-sandbox"],
)

# let "generated" in current pkg to avoid warnings of ".." includes
cc_library(
    name = "generated",
    srcs = [
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/LazyIr.h",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/LazyNativeFunctions.cpp",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/LazyNativeFunctions.h",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/LazyNonNativeIr.h",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/RegisterLazy.cpp",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/shape_inference.cpp",
        "@torch-mlir//python:torch_mlir/csrc/base_lazy_backend/generated/shape_inference.h",
    ],
    includes = [
        ".",
        "python",
        "python/torch_mlir/csrc/base_lazy_backend",
    ],
    deps = [
        "@torch-mlir//python:_generated_deps_header",
    ],
)

# custom mlir target
cc_binary(
    name = "_mlir.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/MainModule.cpp"],
    # These flags are needed for pybind11 to work.
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
    ],
)

cc_binary(
    name = "_mlirRegisterEverything.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/RegisterEverything.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIConversionHeaders",
        "@llvm-project//mlir:CAPIRegisterEverythingHeaders",
        "@llvm-project//mlir:CAPITransformsHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirDialectsLinalg.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/DialectLinalg.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPILinalgHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
    ],
)

cc_binary(
    name = "_mlirDialectsQuant.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/DialectQuant.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIQuantHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
    ],
)

cc_binary(
    name = "_mlirDialectsSparseTensor.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/DialectSparseTensor.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPISparseTensorHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
    ],
)

cc_binary(
    name = "_mlirExecutionEngine.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/ExecutionEngineModule.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIExecutionEngineHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
        "@pybind11",
    ],
)

# Dynamic library with the MLIR Linalg dialect+passes Python extension.
cc_binary(
    name = "_mlirLinalgPasses.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/LinalgPasses.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPILinalgHeaders",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirAsyncPasses.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/AsyncPasses.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIAsyncHeaders",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirSparseTensorPasses.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/SparseTensorPasses.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPISparseTensorHeaders",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirGPUPasses.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/GPUPasses.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIGPUHeaders",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirDialectsTransform.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/DialectTransform.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPITransformDialectHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
        "@pybind11",
    ],
)

cc_binary(
    name = "_mlirDialectsPDL.so",
    srcs = ["externals/llvm-project/mlir/lib/Bindings/Python/DialectPDL.cpp"],
    copts = PYBIND11_COPTS,
    features = PYBIND11_FEATURES,
    includes = ["externals/llvm-project/mlir/lib/Bindings/Python"],
    linkshared = 1,
    tags = [
        "manual",  # External dependency
        "nobuildkite",
    ],
    deps = [
        ":libTorchMLIRAggregateCAPI",
        "@llvm-project//mlir:CAPIPDLHeaders",
        "@llvm-project//mlir:MLIRBindingsPythonCoreNoCAPI",
        "@pybind11",
    ],
)
